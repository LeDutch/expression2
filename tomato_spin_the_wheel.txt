@name Tomato Spin the Wheel
@inputs 
@outputs  
@persist [NumSlices TargetSlice Speed SpinSpeed]:number 
@persist [Odds]:array
@trigger 
@strict

#include "library/tomato_lib"
#include "library/tomato_animations"
#include "themes/spinthewheel/main"

function void main() {
    theme()
    game_board(NumSlices, Odds)
    button_idle()
}

function void spin(Amount:number) {
    ParentSlice["angle", number] = (ParentSlice["angle", number] - Amount) % 360
}

function number getCurrentSlice() {
    let CurrentSlice = floor(((ParentSlice["angle", number] - 90) % 360)/(360/NumSlices))
    return CurrentSlice ? CurrentSlice : NumSlices
}

function number spinAnim(Speed:number) {
    let Time = checkAnimation("Spinner")
    if (Time >= 0.1) {
        spin(Speed)
        return Time
    } else {
        return 0
    }
}

function number travelToSlice(Slice:number) {
    let CurrentAngle = ParentSlice["angle", number]
    let Degrees = 360/NumSlices
    let TargetAngle = (Slice * Degrees + 90) % 360
    if (abs(CurrentAngle - TargetAngle) > SpinSpeed) {
        if (abs(CurrentAngle - TargetAngle) < Degrees) {
            SpinSpeed = max(SpinSpeed - 0.5, 1) 
        }
        
        CurrentAngle = CurrentAngle + SpinSpeed
        if (CurrentAngle >= 360) {
            CurrentAngle = CurrentAngle - 360 
        }
        spin(SpinSpeed)
        return SpinSpeed
    } else {
        ParentSlice["angle", number] = TargetAngle
        return 0
    }
}

if (first() || ~EGP ) {
    NumSlices = 25
    Duration = 3
    Speed = 5
    TargetSlice = 0
    SpinSpeed = 0
    Prefix = "Spinner"
    
    Odds = array(1,3,1,10,1,3,1,5,1,5,3,1,10,1,3,1,5,1,3,1,20,1,3,1,5)
    HouseEdge = 55
    
    main()
    
    #print(calcOddsWithHouseEdge(Odds, HouseEdge))
}

event input(InputName:string) {
    if(InputName == "User") {
        let Buttons = array("SpinButton")
        let Cursor = cursorObj(Buttons, User)
        switch (Cursor) {
            case "SpinButton",
                if(SpinSpeed) {
                    User:msg("Game in progress")
                }
                else {
                    TargetSlice = randint(1, NumSlices)
                    owner():msg("Moving to slice " + floor(TargetSlice) + ": " + Odds[TargetSlice, number] + "x")
                    startAnimation("Spinner", 0.3)
                    button_press()
                    timer("SpinClick", 300)
                    Animation = 1
                }
            break,
            default,
            break
        }
    }
}

interval(100)
    if (->EGP) {
        if (!Animation) {
            spin(0)
        }
        switch(Animation) {
            case 1,
                if (!spinAnim(-2)) {
                    startAnimation("Spinner", 1)
                    button_idle()
                    SpinSpeed = Speed
                    Animation++
                }
            break
            case 2,
                if (!spinAnim(Speed)) {
                    Animation++
                }
            break
            case 3,
                if (!travelToSlice(TargetSlice)) {
                    startAnimation("Spinner", 1)
                    owner():msg("Moved to Slice " + getCurrentSlice())
                    Animation++
                }
            break
            case 4,
                if (!spinAnim(0)) {
                    SpinSpeed = 0
                    Animation = 0 
                }
            break
            default,
            break
        }
    }
