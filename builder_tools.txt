@name Builder Tools
@inputs HUD:wirelink
@persist ENTITY:entity

if(HUD & ~HUD || (first() || dupefinished() && HUD:entity():isValid())) {
    ENTITY = noentity()
    HUD:egpClear()
}

event tick() {
    if(HUD:entity():isValid()) {
        local AimEntity = owner():aimEntity()
        if(AimEntity:isValid()) {
            if(AimEntity != ENTITY) {
                ENTITY = AimEntity
                MATERIAL = ENTITY:getMaterial()
                COLOUR = ENTITY:getColor4()
            }
        } else {
            if(ENTITY:isValid()) {
                ENTITY = noentity()
            }
        }
        
        if(ENTITY:isValid()) {
            local I = 1
            HUD:egp3DTracker(1, vec(0, 0, 0))
            HUD:egpParent(1, ENTITY)
            
            I++
            HUD:egpCircle(I, vec2(), vec2(3, 3))
            HUD:egpParent(I, I - 1)
            HUD:egpColor(I, vec(255, 255, 255))
            I++
            HUD:egpText(I, format("Mass: %d", ENTITY:mass()), vec2(15, 0))
            HUD:egpParent(I, I - 2)
            
            I++
            local Position = ENTITY:pos()
            HUD:egpText(I, format("Position: %0.2f,%0.2f,%0.2f", Position:x(), Position:y(), Position:z()), vec2(15, 25))
            HUD:egpParent(I, I - 3)
            
            I++
            local Angle = ENTITY:angles()
            HUD:egpText(I, format("Angle: %0.2f,%0.2f,%0.2f", Angle:pitch(), Angle:yaw(), Angle:roll()), vec2(15, 50))
            HUD:egpParent(I, I - 4)
            
            local Size = ENTITY:aabbMax()
            local X = Size:x() * 1
            local Y = Size:y() * 1
            local Z = Size:z() * 1
            
            I++
            HUD:egp3DTracker(I, ENTITY:toLocalAxis(ENTITY:right()) * -Y)
            HUD:egpParent(I, ENTITY)
            I++
            HUD:egpCircle(I, vec2(), vec2(3, 3))
            HUD:egpColor(I, vec(255, 0, 0))
            HUD:egpParent(I, I - 1)
            
            I++
            HUD:egpText(I, "X", vec2(0, -12))
            HUD:egpAlign(I, 1, 1)
            HUD:egpColor(I, vec(255, 0, 0))
            HUD:egpParent(I, I - 2)
            
            I++
            HUD:egp3DTracker(I, ENTITY:toLocalAxis(ENTITY:up()) * Z)
            HUD:egpParent(I, ENTITY)
            I++
            HUD:egpCircle(I, vec2(), vec2(3, 3))
            HUD:egpColor(I, vec(0, 255, 0))
            HUD:egpParent(I, I - 1)
            I++
            HUD:egpText(I, "Y", vec2(0, -12))
            HUD:egpAlign(I, 1, 1)
            HUD:egpColor(I, vec(0, 255, 0))
            HUD:egpParent(I, I - 2)
            
            I++
            HUD:egp3DTracker(I, ENTITY:toLocalAxis(ENTITY:forward()) * -X)
            HUD:egpParent(I, ENTITY)
            I++
            HUD:egpCircle(I, vec2(), vec2(3, 3))
            HUD:egpColor(I, vec(0, 0, 255))
            HUD:egpParent(I, I - 1)
            I++
            HUD:egpText(I, "Z", vec2(0, -12))
            HUD:egpAlign(I, 1, 1)
            HUD:egpColor(I, vec(0, 0, 255))
            HUD:egpParent(I, I - 2)
        } else {
            for(I = 1, HUD:egpObjectIndexes():count()) {
                HUD:egpRemove(I)
            }
        }
    }
}

event keyPressed(Player:entity, Key:string, Down:number, KeyBind:string) {
    if(Player == owner()) {
        if(Key == "pad_1" && Down) {
            if(ENTITY:isValid()) {
                concmd("gm_spawn " + ENTITY:model())
            }
        }
    }
}
