@name Tomato Shooting Range
@inputs [Start Stop]:number
@outputs [Time Score]:number
@persist [Model]:string
@persist [Flag Limit Radius CurRand]:number
@persist [Flags]:table

if (first()) {
    # ----- Global Vars ---- #
    Model = ""
    Flag = 0
    Time = 0
    Score = 0
    Limit = 30
    Radius = 1000
    CurRand = 0
    Flags = table()
}

function table getFlags(Model:string) {
    findIncludeModel(Model)
    findInSphere(entity():pos(),Radius)
    let Props = findToArray()
    let Owner = owner()
    let Table = table()
    foreach(_:number, Prop:entity = Props) {
        if (Prop:owner() == Owner) {
            Prop:setAlpha(0)
            Table[toString(Prop:id()), entity] = Prop
        }
    }
    return Table
}

function number table:nextFlag() {
    let Count = This:count()
    let Rand = randint(1, Count)
    if (Rand != CurRand) {
        CurRand = Rand
        let RandFlag = This:keys()[Rand, string]
        This[RandFlag, entity]:setAlpha(255)
        return RandFlag:toNumber()
    }
    return This:nextFlag()
}

function void entity:msg(Text:string) {
    if (!This:isValid()) {return}  
    #This:tauSendChatMsg("{yellow Shooting Range}: " + Text)
    print(Text)
}

function void start() {
    Time = 0
    Score = 0
    if (Model:length()) {
        Flags = getFlags(Model)
        Flag = Flags:nextFlag()
        timer("range", 0.1, 0, function() {
            if (Flag) {
                Time+=0.1
            }
            else {
                stoptimer("range")
            }
        })
    }
    else {
        owner():msg("Setup - Please look at prop and type !model.")
    }
}

function void stop() {
    Flag = 0
    foreach(_:string, Prop:entity = Flags) {
        Prop:setAlpha(255)
    }
}

event entityDamage(Victim:entity, Damage:damage) {
    let ID = Victim:id()
    if (Flag == ID) {
        let Prop = Flags[toString(ID), entity]
        Prop:setAlpha(0)
        entity():soundPlay(randint(1,20), 1, "hl1/fvox/bell.wav")
        Flag = Flags:nextFlag()
        Score++
        if (Score == Limit) {
            stop()
        }
    }
}

if (~Start) {
    if (!Flag) {
        start()
    }
}

if (~Stop) {
    if (Flag) {
        stop()
    }
}

event chat(Player:entity, Message:string, _:number) {
    if (Player == owner() && Message[1] == "!") {
        Arguments = Message:sub(2):explode(" ")
        Command = Arguments:shiftString()
        switch (Command) {
            case "model",
                let Entity = Player:aimEntity()
                if (Flags:count()) {
                    stop()
                }
                if (Entity:isValid()) {
                    Model = Entity:model()
                    Player:msg("Set shooting model to " + Model + ".")
                }
                else {
                    Player:msg("You are not looking at a prop.")
                }
            break
            case "radius",
                let Number = Arguments[1, string]:toNumber()
                if (Number) {
                    Radius = Number
                    Player:msg("Changed radius to " + Number + ".")
                }
                else {
                    Player:msg("Syntax !radius (amount)")
                }
            break
            case "start",
                start()
            break
            case "limit",
                let Number = Arguments[1, string]:toNumber()
                if (Number) {
                    Limit = Number
                    Player:msg("Changed limit to " + Number + ".")
                }
                else {
                    Player:msg("Syntax !limit (amount)")
                }
            break
            case "stop",
                stop()
                Player:msg("Stopping...")
            break
            case "help",
                let Help = array(
                "!limit (amount) - sets score limit.",
                "!radius (amount) - sets scan radius.",
                "!start - start program by command.",
                "!stop - stops program by command.",
                "!model - changes shooting prop (look at prop)."
                )
                
                foreach(_:number, String:string = Help) {
                    Player:msg(String)
                }
            break
            default,
            break
        }
    }
}

event removed(Resetting:number) {
    stop()
}
