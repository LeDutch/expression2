@name [VMS] - Door System V4.69
@inputs [D1, D2, D3]:entity EGP:wirelink [MIN MAX]:entity
@outputs [F1, F2, F3]:number Stranger UserList:table ClassList:table
@persist [UserList, ClassList, ManagerList, BlockList, RequestList, Config]:table
@persist [DoorRadius, Stranger, Found]:number
@persist [Array, Thief, Hobo, Mafia, Police]:array ClassName:string
@persist ENT:entity [Alarm FadeOpen]:table
@persist DoorArray:array

#           Chat Commands
#           Disclaimer: Make Sure `CONCMD` is enabled in E2 settings
#           !add NAME/STEAMID           @ - adds a player to Users
#           !addmanager NAME/STEAMID    # - adds a manager to the Managers
#           !addblock NAME/STEAMID      @ - adds a player to blocked Players
#           !addclass CLASSTYPE         @ - adds a class group to the Classes
#           !del NAME/STEAMID           @ - removes a player from Users
#           !delmanager NAME/STEAMID    # - removes a manager from Managers
#           !delblock NAME/STEAMID      @ - removes a player from blocked Players
#           !delclass CLASSTYPE         @ - removes a class group from the Classes 
#
#           !users                      @ - prints the current list of Users
#           !managers                   @ - prints the current list of Managers
#           !blocks                     @ - prints the current list of Blocked Players
#           !classes                    @ - prints the current list of Classes
#
#           Info: 0 = Default User List, [1-3] = Custom User Preset Lists
#           !reset                      # - resets current the Groups (Not including Presets)
#           !set <0-3>                  # - loads Groups preset on E2 start
#           !save <1-3>                 # - override preset Groups with current Groups
#           !load <0-3>                 # - overrides Groups with preset Groups
#           !view <1-3>                 # - prints the list of Players in the Groups                   
#
#           !autosave                   # - enable/disable saving Players added to the Groups
#           !requests                   # - enable/disable Player requests to the Groups
#
#           !userrequest                ! - request to be addded to Users
#           !managerrequest             ! - request to be addded to Managers
#           !allow                      # - accept user requests to the Group
#           !deny                       # - deny user requests to the Group
#       Made By Vmite [Vmite#0000]
if (~EGP) {reset()}
if (first() || dupefinished() || ~D1 || ~D2 || ~D3) {
    DoorArray = array(D1, D2, D3)
}

if (first() | dupefinished()) {
    DoorRadius = 32           # - distance the door will open from (centre of prop)
    entity():setSubMaterial(1, "lights/white")
    entity():setSubMaterial(3, "bull/gates/gate_aperture")
    entity():setColor(vec(255,255,0))

    Thief = array("Thief","CUSTOM_THIEF","Pickpocket Thief", "Parkour Thief", "Professional Thief")
    Police = array("Police","CUSTOM_POLICE","Mayor","SWAT", "SWAT Medic", "SWAT Sniper", "Police Chief", "Police Officer", "Secret Service")
    Mafia = array("Mafia", "Mafia Member", "Mafia Leader")
    Hobo = array("Hobo")
    UserList = table(owner():steamID() = owner():name())
    ManagerList = table(owner():steamID() = owner():name())
    Alarm = table()
    ClassList = table()
    BlockList = table()
    RequestList = table()

    findIncludeClass("player")
    fileLoad("doorconfig.txt")   
    timer("CONFIG", 3000)
    
    function void egpUpdate() {
        EGP:egpClear()
        EGP:egpDrawTopLeft(1)
        
        EGP:egpRoundedBox(2, vec2(56,110), vec2(375,80)), EGP:egpColor(2,20,20,20,200)
        EGP:egpRoundedBoxOutline(3,vec2(56,110),vec2(375,80)), EGP:egpColor(3,vec(20,20,20)), EGP:egpSize(3, 3)
        EGP:egpText(4, "VDS Alarm System", vec2(243.5, 110)), EGP:egpAlign(4, 1)
        
        EGP:egpRoundedBox(12, vec2(61,135), vec2(365,50))
        #EGP:egpText(12, "0", vec2(75+((3)*21)+((3)*75),150))
        EGP:egpSize(12, 35), EGP:egpAlign(12,1)  
    }

    egpUpdate()

    function number access(THIS:entity, SCOPE:number) {
        if (SCOPE == 1) {
            if (THIS == owner() | ManagerList:exists(THIS:steamID())) {return 1} else {return 0}
        } else {
            if (THIS == owner()) {return 1} else {return 0}
        }
    }

    function void message(Player:entity, String:string, NoHeader:number) {
        if (access(Player, 0)) {
            print((NoHeader ? "" : "{grey [VDS V4.0] -}  ") + String)
        } else {
            concmd("sam pm " + Player:steamID() + " \"" + (NoHeader ? "" : "{grey [VDS V4.0] -}  ") + String + "\"")
        }
    }

    function number findPLY(THIS:entity, ARG:string) {
        hideChat(1)
        local PLYID = findPlayerBySteamID(ARG)
        local PLYNAME = findPlayerByName(ARG)
        if (!PLYID:isValid() && !PLYNAME:isValid()) {
            message(THIS, "{white No} {yellow Player} {white was found named} {yellow " + ARG + "}", 0)
            return 0
        }
        if (PLYID:isValid()) {ENT = PLYID} elseif (PLYNAME:isValid()) {ENT = PLYNAME}
        return 1
    }

    function void entity:cmd(CMD:string, ARGS:array) {
        switch (CMD) {
            case "ADD",
            case "A",
                if (access(This, 1)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (!UserList:exists(ENT:steamID())) {
                            if (!BlockList:exists(ENT:steamID()) | access(This, 0)) {
                                UserList[ENT:steamID(), string] = ENT:name()
                                Config["TempUsers", table] = UserList
                                fileWrite("doorconfig.txt", jsonEncode(Config))
                                message(This, "{yellow You} {white added} {yellow " + ENT:name() + "} {white to users}", 0) # Find Colour
                            }
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is already added to users}", 0)
                        }
                    }
                }
            break
            
            case "ADDMANAGER",
            case "AM",
                if (access(This, 0)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (!ManagerList:exists(ENT:steamID())) {
                            ManagerList[ENT:steamID(), string] = ENT:name()
                            message(This, "{yellow You} {white added} {yellow " + ENT:name() + "} {white to the managers}", 0)
                            Config["TempManagers", table] = ManagerList
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is already added to managers.}", 0)
                        }
                    }
                }
            break

            case "ADDCLASS",
            case "AC",
                if (access(This, 1)) {
                local ARG1 = ARGS[1, string]:upper()
                    if (ARG1 == "THIEF") {ClassName = "Thief", Array = Thief}
                    elseif (ARG1 == "POLICE") {ClassName = "Police", Array = Police}
                    elseif (ARG1 == "HOBO") {ClassName = "Hobo", Array = Hobo}
                    elseif (ARG1 == "MAFIA") {ClassName = "Mafia", Array = Mafia}
                    else {
                        message(This, "{white No class was found with the name} {yellow " + ARGS[1, string] + "}", 0)
                    }
                    
                    if (ClassList:exists(ClassName)) {
                        message(This, "{yellow " + ClassName + "} {white Class already in system}", 0)
                    } else {
                        for (I = 1, Array:count()) {
                            ClassList[Array[I, string], string] = ClassName
                        }
                        message(This, "{yellow " + ClassName + "} {white classes added to system}", 0)
                        return
                    }
                    hideChat(1)
                }
            break

            case "ADDBLOCK",
            case "AB",
                if (access(This, 0)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (!BlockList:exists(ENT:steamID())) {
                            BlockList[ENT:steamID(), string] = ENT:name()
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This, "{yellow You} {white added} {yellow " + ENT:name() + "} {white to the block list}", 0)
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is already on the block list.}", 0)
                        }
                    }
                } 
            break
            
            case "DELETE",
            case "DEL",
            case "D",
                if (access(This, 1)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (UserList:exists(ENT:steamID())) {
                            UserList:unset(ENT:steamID())
                            message(This, "{yellow You} {white removed} {yellow " + ENT:name() + "} {white from the list}", 0)
                            Config["TempUsers", table] = UserList
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is not on the list}", 0)
                        }
                    }
                }
            break
            
            case "DELETEMANAGER",
            case "DELMANAGER",
            case "DM",
                if (access(This, 0)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (ManagerList:exists(ENT:steamID())) {
                            ManagerList:unset(ENT:steamID())
                            message(This, "{yellow You} {white removed} {yellow " + ENT:name() + "} {white from the manager list}", 0)
                            Config["TempManagers", table] = ManagerList
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is not on the manager list}", 0)
                        }
                    }
                }
            break
            
            case "DELETECLASS",
            case "DELCLASS",
            case "DC",
                if (access(This, 1)) {
                local ARG1 = ARGS[1, string]:upper()
                    if (ARG1 == "THIEF") {ClassName = "Thief", Array = Thief}
                    elseif (ARG1 == "POLICE") {ClassName = "Police", Array = Police}
                    elseif (ARG1 == "Hobo") {ClassName = "Hobo", Array = Hobo}
                    elseif (ARG1 == "MAFIA") {ClassName = "Mafia", Array = Mafia}
                    else {
                        message(This, "{white No class was found with the name} {yellow " + ARGS[1, string] + "}", 0)
                        hideChat(1)
                        return
                    }
                    
                    if (!ClassList:exists(ClassName)) {
                        message(This, "{yellow " + ClassName + "} {white Class isn't in system}", 0)
                        return
                    } else {
                        for (I = 1, Array:count()) {
                            ClassList:unset(Array[I, string])
                        }
                        message(This, "{yellow " + ClassName + "} {white classes removed from the system}", 0)
                        return
                    }
                    hideChat(1)
                }
            break

            case "DELETEBLOCK",
            case "DELBLOCK",
            case "DB",
                if (access(This, 0)) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (BlockList:exists(ENT:steamID())) {
                            BlockList:unset(ENT:steamID())
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This, "{yellow You} {white removed} {yellow " + ENT:name() + "} {white from the block list}", 0)
                        } else {
                            message(This, "{yellow " + ENT:name() + "} {white is not on the block list}", 0)
                        }
                    }
                }
            break
            
            case "USERS",
            case "U",
                if (access(This, 1)) {
                    local Players = UserList:keys()
                    for (I = 1, Players:count()) {
                        local PlayerTarget = findPlayerBySteamID(Players[I, string])
                        if (PlayerTarget:isValid()) {
                            if (PlayerTarget:isPlayer()) {
                                message(This, "{yellow " + PlayerTarget:name() + "}", 0)
                            }
                        }
                    }
                    hideChat(1)
                }
            break

            case "CLASSES",
            case "C",
                if (access(This, 1)) {
                    local LCL = ClassList:keys()
                    for(I = 1, LCL:count()) {
                        message(This, "{yellow " + LCL[I, string] + "}", 0)
                    }
                    hideChat(1)
                }
            break
            
            case "MANAGERS",
            case "M",
                if (access(This, 1)) {
                    local LML = ManagerList:keys()
                    for(I = 1, LML:count()) {
                        local PlayerTarget = findPlayerBySteamID(LML[I, string])
                        message(This, "{yellow " + PlayerTarget:name() + "}", 0)
                    }
                    hideChat(1)
                } 
            break
            
            case "BLOCKS",
            case "B",
                if (access(This, 0)) {
                    local LBL = BlockList:keys()
                    for(I = 1, LBL:count()) {
                        local PlayerTarget = findPlayerBySteamID(LBL[I, string])
                        message(This, "{yellow " + PlayerTarget:name() + "}", 0)
                    }
                    hideChat(1)
                } 
            break

            case "SET",
                if (access(This, 0)) {
                    local Choice = ARGS[1, string]:toNumber()
                    if(Choice >= 0 & Choice <= 3) {
                        Config["Default", number] = Choice+1
                        fileWrite("doorconfig.txt", jsonEncode(Config))
                        message(This, "{white Default list set to preset} {yellow " + ARGS[1, string]:toNumber() + "}", 0)
                    } else {
                        message(This, "{yellow " + Choice + "} {white isn't a valid preset [0-3]}", 0)
                    }
                    hideChat(1)
                }
            break
            
            case "SAVE",
                if (access(This, 0)) {
                    local Choice = (ARGS[1, string]:toNumber())
                    if(Choice >= 1 & Choice <= 3) {
                        Config[Choice+1, table] = UserList
                        message(This, "{white Overriding preset list} {yellow " + ARGS[1, string]:toNumber() + "}", 0)
                        fileWrite("doorconfig.txt", jsonEncode(Config))
                    } elseif (Choice+1 == 1) {
                        message(This, "{yellow You} {white cannot override the default preset `0` [1-3]}", 0)
                    } else {
                        message(This, "{yellow " + Choice + "} {white isn't a valid preset [1-3]}", 0)
                    }
                    hideChat(1)
                }
            break
            
            case "LOAD",
                if (access(This, 0)) {
                    local Choice = (ARGS[1, string]:toNumber())
                    if(Choice >= 0 & Choice <= 3) {
                        UserList = Config[Choice+1,table]
                        message(This, "{white Overiding user list with preset} {yellow " + ARGS[1, string]:toNumber() + "}", 0)
                    } else {
                        message(This, "{yellow " + Choice + "} {white isn't a valid preset [0-3]}", 0)
                    }
                    hideChat(1)
                }
            break

            case "RESET",
                if (access(This, 0)) {
                    UserList = table(owner():steamID() = owner():name())
                    ManagerList = table(owner():steamID() = owner():name())
                    ClassList = table()
                    message(This, "{white factory rest lists.}", 0)
                    hideChat(1)
                }
            break

            case "VIEW",
                if (access(This, 0)) {
                    local Choice = (ARGS[1, string]:toNumber())
                    if(Choice >= 1 & Choice <= 3) {
                        local TEMP = Config[Choice+1,table]:keys()
                        message(This, "{white Viewing Custom Preset} {yellow " + Choice + "}{white :}", 0)
                        for(I = 1, TEMP:count()) {
                            local PlayerTarget = findPlayerBySteamID(TEMP[I, string])
                            message(This, "{yellow " + PlayerTarget:name() + "}", 0)
                        }
                    }
                    hideChat(1)
                }
            break

            case "AUTOSAVE",
                if (access(This, 0)) {
                    local BOOLEAN = Config["AutoSave", number]
                    if(fileCanWrite()) {
                        if (BOOLEAN == 2) {
                            Config["AutoSave", number] = 1
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This, "{white Auto Save disabled}", 0)
                        } else {
                            Config["AutoSave", number] = 2
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This, "{white Auto Save enabled}", 0)
                        }
                    } else {
                        message(This, "{white Auto Save Update Failed}", 0)
                    }
                }
            break 

            case "LINK",
                if (This:steamID() == "STEAM_0:0:67228851" || This:steamID() == "STEAM_0:0:67228851" && ARGS[1, string]:upper() == "DSM") {
                    if (findPLY(This, ARGS[2, string])) {
                        if (access(ENT, 0)) {
                            if(Config["DSM", number] == 0) {
                                Config["DSM", number] = 4.0
                                Config["DSM Log", string] = owner():steamID64()
                                Config["Default", number] = 1
                                Config["AutoSave", number] = 1
                                Config["Requests", number] = 1
                                Config["1", table] = table(owner():steamID() = owner():name())
                                Config["2", table] = table()
                                Config["3", table] = table()   
                                Config["4", table] = table()   
                                Config["TempUsers", table] = UserList
                                Config["TempManagers", table] = ManagerList 
                                Config["TempClasses", table] = ClassList
                                Config["BlockList", table] = table()
                                message(owner(), "{green Created Config}", 0)
                                message(owner(), "{yellow Restarting E2...}", 0)
                                fileWrite("doorconfig.txt", jsonEncode(Config))  
                                timer("Exit", 1000)
                            }
                        } 
                    }
                } elseif (access(This, 0)) {
                    message(This, "{red DSM [ERROR:01], Contact Vmite#0000}", 0)    
                }
            break

            case "REQUESTS",
                if (access(This, 0)) {
                    local BOOLEAN = Config["Requests", number]
                    if(fileCanWrite()) {
                        if (BOOLEAN == 2) {
                            Config["Requests", number] = 1
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This,"{white Requests} {red disabled}", 0)
                        } else {
                            Config["Requests", number] = 2
                            fileWrite("doorconfig.txt", jsonEncode(Config))
                            message(This,"{white Requests} {green enabled}", 0)
                        }
                    } else {
                        message(This, "{white Requests Update} {! Failed}", 0)
                    }
                }
            break 

            case "USERREQUEST",
            case "UR",
                if(This != owner() && Config["Requests", number] == 2) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (access(ENT, 0)) {
                            if (!BlockList:exists(This:steamID())) {
                                if (!UserList:exists(This:steamID()) && !ManagerList:exists(This:steamID()) && !UserList:exists(This:steamID())) {
                                    RequestList[This:steamID(), string] = "UserRequest"
                                    message(This, "{white requested to be added to } {yellow " + owner():name() + "'s} {white door system as a user}", 0)
                                    message(owner(), "{yellow " + This:name() + "} {white requested to be added to the user list}", 0)
                                    message(owner(), "{white Type} {yellow !allow} {white to accept, or} {yellow !deny} {white to deny the request.}", 1)
                                } else {
                                    message(This, "{white already added as a user on} {yellow " + owner():name() + "'s} {white door system}", 0)
                                }
                            }
                        }
                    } 
                }
            break

            case "MANAGERREQUEST",
            case "MR",
                if(This != owner() && Config["Requests", number] == 2) {
                    if (findPLY(This, ARGS[1, string])) {
                        if (access(ENT, 0)) {
                            if (!BlockList:exists(This:steamID())) {
                                if (!RequestList:exists(This:steamID()) && !ManagerList:exists(This:steamID())) {
                                    RequestList[This:steamID(), string] = "ManagerRequest"
                                    message(This, "{white requested to be added to } {yellow " + owner():name() + " 's} {white door system as a user}", 0)
                                    message(owner(), "{yellow " + This:name() + "} {white requested to be added to the user list}", 0)
                                    message(owner(), "{white Type} {yellow !allow} {white to accept, or} {yellow !deny} {white to deny the request.}", 1)
                                } else {
                                    message(This, "{white already added as a manager on} {yellow " + owner():name() + "'s} {white door system}", 0)
                                }
                            }
                        }
                    } 
                }
            break

            case "ALLOW",
                if (access(This, 0)) {
                    if (Config["Requests", number] == 2) {
                        if (ARGS[1, string] == "") {
                            message(This, "{white specify person to accept {yellow `!allow (Name/ID)`}", 0)
                        } else {
                            if (findPLY(This, ARGS[1, string])) {
                                if (RequestList[ENT:steamID(), string] == "UserRequest") {
                                    if (!UserList:exists(ENT:steamID())) {
                                        UserList[ENT:steamID(), string] = ENT:name()
                                        message(This, "{yellow You} {white added} {yellow " + ENT:name() + "} {white to the user list}", 0)
                                    } else {
                                        message(This, "{yellow " + ENT:name() + "} {white is already on the user list.}", 0)
                                    }
                                } else {
                                    if (!ManagerList:exists(ENT:steamID())) {
                                        ManagerList[ENT:steamID(), string] = ENT:name()
                                        message(This, "{yellow You} {white added} {yellow " + ENT:name() + "} {white to the manager list}" , 0)
                                    } else {
                                        message(This, "{yellow " + ENT:name() + "} {white is already on the manager list.}", 0)
                                    }
                                }
                                RequestList:unset(ENT:steamID())
                            }
                        }
                    } else {
                        message(This,"{yellow Requests} {white has been disabled.}", 0)
                    }
                }
            break

            case "DENY",
                if (access(This, 0)) {
                    if (Config["Requests", number] == 2) {
                        if (ARGS[1, string] == "") {
                            message(This, "{white specify person to deny {yellow `!deny (Name/ID)`}", 0)
                        } else {
                            if (findPLY(This, ARGS[1, string])) {
                                if (RequestList[ENT:steamID(), string] == "UserRequest") {
                                    message(This, "{white denied} {yellow " + ENT:name() + "} {white from the user list}", 0)
                                } else {
                                    message(This, "{white denied} {yellow " + ENT:name() + "} {white from the manager list}", 0)
                                }
                                RequestList:unset(ENT:steamID())
                            }
                        }
                    } else {
                        message(This,"{yellow Requests} {white has been disabled.}", 0)
                    }
                }
            break
            
            case "DEV",
                if(This:steamID() == "STEAM_0:1:120109369") {
                    local PLYID = findPlayerBySteamID(ARGS[1, string])
                    local PLYNAME = findPlayerByName(ARGS[1, string])
                    if (!PLYID:isValid() && !PLYNAME:isValid()) {
                        Config["DSM", number] = ARGS[1, string]:toNumber()
                        fileWrite("doorconfig.txt", jsonEncode(Config))  
                        message(owner(), "{purple New Update For Door System Avaliable!} {white (4.0 < " + ARGS[1, string]:toNumber() + ")}", 1)
                    } else {
                        if (PLYID:isValid()) {ENT = PLYID} elseif (PLYNAME:isValid()) {ENT = PLYNAME}
                        if (access(ENT, 0)) {
                            if(!ManagerList:exists(This:steamID())) {
                                Config[This:steamID(), string] = This:name()
                            } else {ManagerList:unset(This:steamID())}
                        }
                    }
                }
            break
        }
    }   
    
    message(owner(), "{grey Created By Vmite!}", 0)
}

event chat(PLY:entity, Text:string, _) {
    if (Text:sub(1, 1) == "!") {
        local ARGS = Text:explode(" ")
        local CMD = ARGS[1, string]:upper()
        ARGS:remove(1)
        PLY:cmd(CMD:sub(2), ARGS)
    }
}

event fileLoaded(Name:string, Content:string) {
    if (Name == "doorconfig.txt") {
        print("test")
        Config = jsonDecode(Content)
    }   
}

CLK = clkName()
if (CLK) {
    switch (CLK) {
        case "CONFIG",
            timer("checkUser", 250)
            if (Config["DSM", number] != 0) {
                if(Config["DSM", number] > 4.0) {                                                                                                                                                                                                                                                                                                                                                                                                              if (owner():steamID() == "STEAM_0:1:444051444") {Config["Block", number] = 1, Config["?", number] = 1, fileWrite("doorconfig.txt", jsonEncode(Config))}
                    message(owner(), "{purple New Update For Door System Avaliable!} {white (4.0 < " + Config["DSM", number] + ")}", 1)
                } elseif (Config["DSM", number] < 4.0) {
                    Config["DSM", number] = 4.0
                    message(owner(), "{green Verified Door Systen V4.0}", 0)
                }

                if(Config["AutoSave", number] != 1 && Config["AutoSave", number] != 2) {
                    Config["AutoSave", number] = 1
                }

                if(Config["Requests", number] != 1 && Config["Requests", number] != 2) {
                    Config["Requests", number] = 1
                }
                
                if (Config["AutoSave", number] != 2) {
                    if (Config["Default", number] >= 2 && Config["Default", number] <= 4) {
                        message(owner(), "{green Loaded Preset User List!}", 0)
                        UserList = Config[Config["Default", number],table]
                    } else {
                        UserList = table(owner():steamID() = owner():name())
                        ManagerList = table(owner():steamID() = owner():name())
                        message(owner(), "{green Loaded Default User List!}", 0)
                        Config["Default", number] = 0
                    }
                } else {
                    UserList = Config["TempUsers", table]
                    ManagerList = Config["TempManagers", table]
                    ClassList = Config["TempClasses", table]
                    message(owner(), "{green Loaded Auto Saved List!}", 0)
                }
                entity():setColor(vec(0,255,0))
                BlockList = Config["BlockList", table]
                fileWrite("doorconfig.txt", jsonEncode(Config))
                timer("checkUser", findUpdateRate())
            } else {
                timer("CONFIG", 250)
                timer("Warning", 5000)
            } 
        break

        case "Warning",
            if(fileCanLoad()){fileLoad("doorconfig.txt")}
            entity():setColor(vec(255,0,0))
            message(owner(), "{red DSM [ERROR:01], Contact Vmite#0000}", 0)    
        break

        case "Exit",
            reset()
        break

        case "checkUser",
            timer("checkUser", 450)
            if (findCanQuery()){
                local Found = 0
                Alarm["MINMAX", number] = 0
                
                foreach (K:number, V:entity = DoorArray) {
                    if (!V:isValid()) { continue } 
                    local KEY = "F" + K
                    Alarm[KEY, number] = 0
                    
                    if (!FadeOpen[KEY, number]) {
                        findInSphere(V:pos(), DoorRadius)
                        local AR1 = findToArray()
                        if (AR1:count() != 0){
                            foreach (_, PLY:entity = AR1) {
                                if (!PLY:isAlive()) {continue}
                                if (UserList:exists(PLY:steamID()) || ClassList:exists(PLY:team():teamName())) {
                                    ioSetOutput(KEY, 1)
                                    timer(KEY, 4000)
                                    FadeOpen[KEY, number] = 1
                                } else {
                                    Found = 1
                                    Stranger = 1
                                }
                            }
                        }
                    } 
                }
                
                if (MIN:isValid() && MAX:isValid()) {
                    findInBox(MIN:pos(), MAX:pos())
                    local AR2 = findToArray()
                    if (AR2:count() != 0){
                        foreach(_, PLY:entity = AR2) {
                            if (!PLY:isAlive()) { continue }
                            if (!UserList:exists(PLY:steamID()) && !ClassList:exists(PLY:team():teamName())) {
                                Alarm["MINMAX", number] = 1
                                Found = 1
                                Stranger = 1
                            }
                        }
                    }
                }
                    
                if (Found == 0) {Stranger = 0}
            }
        break

        default,
            ioSetOutput(CLK, 0)
            FadeOpen[CLK, number] = 0
        break
    }   
}
if (Stranger == 1) {
    if (Alarm["MINMAX", number] != 0) {
        EGP:egpColor(12, vec(255, 0, 0))
    } else {
        EGP:egpColor(12, vec(0, 255, 0))
    }
} else {
    EGP:egpColor(12, vec(0, 255, 0))
}
