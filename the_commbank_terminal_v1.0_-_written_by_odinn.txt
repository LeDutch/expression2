@name The Commbank Terminal V1.0 - Written by Odinn

@inputs MemberScreen:wirelink Staff:wirelink
@outputs FadingDoor MONEY DEPOSIT

@persist [Timer Heading_X Original_X Heading_ID BUY BUY_PERM Support MONEY DEPOSIT WAITING_TO_CLOSE]:number
@persist [TITLE OLD_HEADING]:string

@persist [User_cache Membership TempPackages PermPackages Statistics AllowedFrom]:table

@persist Settings:table

#include "lib/old_egp"
#include "olib/numbers"

if (first() || dupefinished()) {
# CONFIG

TITLE = "Commbank"   
BUY = 500000
BUY_PERM = BUY*10

# Addon Config
TempPackages = table(
    "Insurance" = table(
        "Description" = "You get 15% of the printer cost back.",
        "Price" = 200000
    ),
    
    "Test Package" = table(
        "Description" = "This is a test package. Do not buy it?",
        "Price" = 500
    )
)

PermPackages = table(

)

FadingDoor = 0

# END CONFIG
}

if (first() || dupefinished()) {
    Timer = 0
    
    Colours["Header", vector] = vec(200, 100, 50)
    Colours["Yellow", vector] = vec(254, 202, 10)
    
    fileLoad("commbank_stats.txt")
    
    Membership = table()
    User_cache = table()
    Settings = table(
        "deposit" = 1,
        "money" = 1
    )
    
    Support = 5000
    OLD_HEADING = ""
    Statistics = table()
    AllowedFrom = table()
    
    dsJoinGroup("Commbank_Statistics")
    dsSetScope(2)
    
    function number entity:isAllowedSend() {
        return AllowedFrom:exists(This:id():toString())
    }
    
    function void entity:setAllowed() {
        if (This:isAllowedSend()) {
            return   
        }
        
        AllowedFrom[This:id():toString(), number] = 1   
    }
    
    function void entity:removeAllowed() {
        AllowedFrom:remove(This:id():toString())
    }
    
    function void writeMembers() {
        fileWrite("commbank_stats.txt", jsonEncode(table(
            "users" = Membership,
            "stats" = Statistics
        )))
    }
    
    function void update_member_string() {
        local Member = TITLE + " Members:\n----------\n"
        
        foreach (_:string, D:table = Membership) {
            Member = Member + D["Name", string] + "\n"   
        }   

        MemberScreen["String", string] = Member
    }
    
    function number entity:isMember() {
        return Membership:exists(This:steamID())   
    }
    
    function array entity:getPackages() {
        if (!This:isMember()) {
            return array()   
        }
        
        return Membership[This:steamID(), table]["Packages", array]
    }
    
    function number entity:hasPackage(N:string) {
        if (!This:isMember()) {
            return 0
        }
        
        local Packages = Membership[This:steamID(), table]["Packages", array]
        
        foreach (_:number, V:string = Packages) {
            if (V == N) {
                return 1
            }   
        }
        
        return 0
    }
    
    function void entity:setMember(Perm:number) {
        Membership[This:steamID(), table] = table(
            "Name" = This:name(),
            "Type" = Perm,
            "Packages" = array()
        )  
        
        if (Perm == 2) {
            writeMembers()
        }
        
        update_member_string()
    }
    
    function array getStaff() {
        if (!->Staff) {
            return array()
        }   
        
        return Staff:egpConnectedUsers()
    }
    
    function number entity:permMember() {
        return Membership[This:steamID(), table]["Type", number] == 2   
    }
    
    function vector2 vector2:drawLogo(Size:vector2) {
        This = This:button(2, Size, "Yellow":colour())
        2:setMaterial("zerochain/zmlab2/ui/icon_bee.png")
        return This
    }

    function egpobject text(ID:number, ARGS:table) {
        return EGP:egpTextLayout(ID, ARGS)
    }

    function egpobject circle(ID:number, ARGS:table) {
        if (ARGS["outline", number]) {
            return EGP:egpCircleOutline(ID, ARGS)
        }
        return EGP:egpCircle(ID, ARGS)
    }

    function egpobject box(ID:number, ARGS:table) {
        if (ARGS["outline", number]) {
            return EGP:egpRoundedBoxOutline(ID, ARGS)
        }
        return EGP:egpRoundedBox(ID, ARGS)
    }

    function egpobject line(ID:number, ARGS:table) {
        return EGP:egpBox(ID, ARGS)
    }

    function void drawLogo(IDBase:number, Pos:vector2, Size:number) {
        EGP:egpDrawTopLeft(1)
    
        box(IDBase + 1, table("x"=132.0, "y"=226.21, "w"=164.35, "h"=164.35, "r"=255, "g"=191, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 1, vec2(132.0, 226.21), vec2(0, 0), 45.0)
        box(IDBase + 2, table("x"=298.34, "y"=233.36, "w"=52.55, "h"=43.02, "r"=0, "g"=0, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 2, vec2(298.34, 233.36), vec2(0, 0), 44.51)
        box(IDBase + 3, table("x"=247.07, "y"=342.96, "w"=121.96, "h"=39.73, "r"=0, "g"=0, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 3, vec2(247.07, 342.96), vec2(0, 0), 64.84)
        text(IDBase + 4, table("text"="CommonWealth Bank", "x"=109.0, "y"=363.0, "w"= 290.0, "h"=40.0, "r"=255, "g"=255, "b"=255, "size"=15, "halign"=1, "valign"=1))
        
        let Gray = "DarkGray":colour()
        let R = Gray:x()
        let G = Gray:y()
        let B = Gray:z()

        box(IDBase + 5, table("x"=248.16, "y"=342.43, "w"=164.65, "h"=37.03, "r"=R, "g"=G, "b"=B, "radius"=0))
        EGP:egpAngle(IDBase + 5, vec2(248.16, 342.43), vec2(0, 0), 45.0)
        box(IDBase + 6, table("x"=226.44, "y"=371.35, "w"=86.0, "h"=35.87, "r"=R, "g"=G, "b"=B, "radius"=0))
        EGP:egpAngle(IDBase + 6, vec2(226.44, 371.35), vec2(0, 0), 135.0)
    }
    
    function vector2 vector2:heading(Title:string) {
        local Old = This
        
        local MAG = 1.8
        
        # This = This:drawLogo(vec2(50, 50))

        vec2(15, 15):button(2, vec2(35, 35), "DarkGray":colour())

        local M = Support > 0 ? "  ($" + Support + ")" : ""
        
        vec2(W/MAG, 15):round_button(5, vec2(W-(W/MAG)-10, 45), "Yellow":colour())
        vec2(W/MAG, 15):text(6, W-(W/MAG)-10, 45, "Request Commbank Support" + M , 15)
        
        Old[1] = 70
        
        Old:text(3, 0, 50, Title, 35)
        
        let IDBase = 250

        box(IDBase + 1, table("x"=11.0, "y"=33.15, "w"=35.57, "h"=35.57, "r"=255, "g"=191, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 1, vec2(11.0, 33.15), vec2(0, 0), 45.0)
        box(IDBase + 2, table("x"=47.0, "y"=34.7, "w"=11.37, "h"=9.31, "r"=0, "g"=0, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 2, vec2(47.0, 34.7), vec2(0, 0), 44.51)
        box(IDBase + 3, table("x"=35.9, "y"=58.41, "w"=26.39, "h"=8.6, "r"=0, "g"=0, "b"=0, "radius"=0))
        EGP:egpAngle(IDBase + 3, vec2(35.9, 58.41), vec2(0, 0), 64.84)

        let Gray = "DarkGray":colour()
        let R = Gray:x()
        let G = Gray:y()
        let B = Gray:z()

        box(IDBase + 4, table("x"=36.14, "y"=58.3, "w"=35.63, "h"=8.01, "r"=R, "g"=G, "b"=B, "radius"=0))
        EGP:egpAngle(IDBase + 4, vec2(36.14, 58.3), vec2(0, 0), 45.0)
        box(IDBase + 5, table("x"=31.44, "y"=64.56, "w"=18.61, "h"=7.76, "r"=R, "g"=G, "b"=B, "radius"=0))
        EGP:egpAngle(IDBase + 5, vec2(31.44, 64.56), vec2(0, 0), 135.0)

        EGP:egpRemove(IDBase + 6)

        This[2] = 70
        
        if (OLD_HEADING != Title) {
            Heading_X = -35
            Original_X = Old[1]
            Heading_ID = 3
            3:setX(Heading_X)
            stoptimer("heading_x")
            timer("heading_x", 0)
        }
        
        OLD_HEADING = Title
        
        vec2(0, 0):outline_button(4, vec2(W, H), "Yellow":colour())
        4:setSize(4)
    
        This[1] = 10

        return This
    }
    
    function void login() {
        #vec2((W/2)-200, (H/2)-200):drawLogo(vec2(400, 400))
        drawLogo(250, vec2(W/2,H/2), 400)
        
        Heading_X = -400
        Original_X = (W/2)-200
        Heading_ID = 2
        stoptimer("heading_x")
        timer("heading_x", 0)
        2:setX(-200)
        
        vec2(0, 0):outline_button(4, vec2(W, H), "Yellow":colour())
        4:setSize(4)
    
        vec2(0, 0):text(512, 512, "Press [E] to Start!", 50)
    }
    
    function void confirm() {   
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Confirmation")
        
        Pos = Pos:brText(63, vec2(W-30, 50), "Yellow":colour(), "ARE YOU SURE, " + LockedUser:name() + "???", "White":colour())
    }
    
    function void admin() {
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Admin")
        
        Pos = Pos:brText(68, vec2(W-30, 50), "Yellow":colour(), (Settings["deposit", number] ? "Disbale" : "Enable") + " Deposit Box")
        Pos = Pos:brText(69, vec2(W-30, 50), "Yellow":colour(), (Settings["money", number] ? "Disable" : "Enable") + " Money Box")
        
        local C = 0
            foreach (ID:string, Data:table = Membership) {
                User_cache[(70+C):toString(), string] = ID
                Pos = Pos:brText(70+C, vec2(W-30, 30), "Yellow":colour(), "Revoke " + Data["Name", string] + " Membership.", "White":colour())
                C++
            }   
    }
    
    function void deposit_close() {
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Close Box")
        Pos[1] = 15 
        
        if (!Settings["deposit", number]) {
            return
        }
        
        Pos = Pos:brText(268, vec2(W-30, 50), "Yellow":colour(), "CLOSE DEPOSIT BOX", "White":colour())
    }
    
    function void deposit() {
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Deposit Box")
        Pos[1] = 15
        
        if (!Settings["deposit", number]) {
            Pos = Pos:text(512, 0, "Deposit Box has been disabled.", 30, "Yellow":colour())
            
            return   
        }
     
        Pos = Pos:text(512, 0, "Please read our terms and conditions.", 30, "Yellow":colour())
        
        foreach (_:number, V:string = array(
            "Once you have read and understand these terms",
            "Press the OPEN button below to open the deposit box.",
            "",
            "1. If you raid this bank, any printers which you have",
            "deposited will be forfiet to " + TITLE + ".",
            "",
            
            "2. The TAX we take from your printers may change.",
            "If you have issues with the money you receive,",
            "please speak with Andrew Tate.",
            ""
        )) {
            Pos = Pos:text(V)
        }
        
        Pos = Pos:brText(266, vec2(W-30, 50), "Yellow":colour(), "OPEN DEPOSIT BOX", "White":colour())
    }
    
    function void moneybox_close() {
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Close Box")
        Pos[1] = 15 
        
        if (!Settings["money", number]) {
            return
        }
        
        Pos = Pos:brText(269, vec2(W-30, 50), "Yellow":colour(), "CLOSE MONEY BOX", "White":colour())
    }
    
    function void moneybox() {
        local Pos = vec2(10, 10)
        
        Pos = Pos:heading("Money Box")
        Pos[1] = 15
        
        if (!Settings["money", number]) {
            Pos = Pos:text(512, 0, "Money Box has been disabled.", 30, "Yellow":colour())
            
            return   
        }
        
        Pos = Pos:text(512, 0, "Please read our terms and conditions.", 30, "Yellow":colour())
    
        foreach (_:number, V:string = array(
            "Once you have read and understand these terms",
            "Press the OPEN button below to open the money box.",
            "",
            "1. If you raid this bank, any money owed via money boxes",
            "deposited will be forfiet to " + TITLE + ".",
            "",
            
            "2. The TAX we take from your money boxes may change.",
            "If you have issues with the money you receive,",
            "please speak with Andrew Tate.",
            ""
        )) {
            Pos = Pos:text(V)
        }
        
        Pos = Pos:brText(267, vec2(W-30, 50), "Yellow":colour(), "OPEN MONEY BOX", "White":colour())
    }
    
    function vector2 vector2:membership() {
        local Pos = This:heading("Membership")
        
        Pos[1] = 15
        
        if (LockedUser:isMember()) {
            Pos = Pos:text(512, 0, "Membership Statistics", "Yellow":colour()) 
            
            if (LockedUser:permMember()) {
                Pos = Pos:text(512, 0, "PERMANENT MEMBER.", "Red":colour())  
                
                Pos = Pos:brText(60, vec2(W-30, 30), "Yellow":colour(), "Revoke your Perm Membership.", "Red":colour())
            }
            
            if (Statistics:exists(LockedUser:steamID())) {
                local Stats = Statistics[LockedUser:steamID(), table]
                
                Pos = Pos:text(512, 0, "Your Total Earnings", 30, "Yellow":colour())
                Pos = Pos:text(512, 0, "$" + Stats["TotalCollected", number]:comma(), 35, "Green":colour())
            } else {
                Pos = Pos:text(512, 0, "No Statistics", 30, "Yellow":colour())
                Pos = Pos:text(512, 0, "Yet... Wait for one of our staff to collect", "White":colour())
                Pos = Pos:text(512, 0, "your money and come back to see your statistics.", "White":colour())
            }
            
            Pos = Pos:text(512, 0, "Optional Packages", 30, "Yellow":colour())
            
            if (LockedUser:permMember()) {
                local C = 0
                
                if (!PermPackages:count()) {
                    Pos = Pos:text(512, 0, "There are no packages available.", 25, "Red":colour())
                }
                
                foreach (Name:string, Data:table = PermPackages) {
                    local Old = Pos
                    
                    local PaidColour = LockedUser:hasPackage(Name) ? "Green":colour() : "Yellow":colour()
                    
                    Pos = Pos:round_button(150+C, vec2(W-30, 60), PaidColour)
                    Old:text(W-30, 40, Name + " $" + Data["Price", number]:comma())
                    Old:text(W-30, 90, Data["Description", string])
                    C++
                }
            } else {
                local C = 0
                
                if (!TempPackages:count()) {
                    Pos = Pos:text(512, 0, "There are no packages available.", 25, "Red":colour())
                }
                
                foreach (Name:string, Data:table = TempPackages) {
                    local Old = Pos
                    
                    local PaidColour = LockedUser:hasPackage(Name) ? "Green":colour() : "Yellow":colour()
                    
                    Pos = Pos:round_button(150+C, vec2(W-30, 60), PaidColour)
                    
                    if (!LockedUser:hasPackage(Name)) {
                        Old:text(W-30, 40, Name + " $" + Data["Price", number]:comma())
                    } else {
                        Old:text(W-30, 40, Name + " [PAID]")
                    }
                    
                    Old:text(W-30, 90, Data["Description", string])  
                    C++ 
                }
            }
            
            if (LockedUser != owner()) { return Pos }
            
            Pos = Pos:bText(61, vec2(W-30, 30), "Yellow":colour(), "Go to Admin Page.", "White":colour())
            
            return Pos 
        }
        
        local White = "White":colour()
        local Yellow = "Yellow":colour()
        
        Pos = Pos:text(512, 0, "OUR ALL NEW", 25, "Red":colour())
        Pos = Pos:text(512, 0, "COMMERSHIP", 35, Yellow)
        
        Pos = Pos:text(512, 0, "Our all new special COMMERSHIP plan gives", 20, White)
        Pos = Pos:text(512, 0, "YOU access to our GOLDEN features!", 20, White)
        Pos = Pos:text(512, 0, "With our COMMERSHIP plan", 30, Yellow)
        
        local Bef = Pos
        
        Pos = Pos:text("With a Temp Membership you get:", 15, Yellow)
        
        foreach (_:number, V:string = array(            #
            "10% lower tax rate!",
            "Access to view your statistics!"
        )) {
            Pos = Pos:text("- " + V, 15, White)   
        }
        
        Pos = Bef
        Pos[1] = (512/2)+10
        
        Pos = Pos:text("With a Perm Membership you get:", 15, Yellow)
        
        foreach (_:number, V:string = array(            #
            "Everything in the Temp Plan",
            "ONLY WILL GET 5% lower tax rate!",
            "A Handie from andrew :)",
            "Insurance package included"
        
        )) {
            Pos = Pos:text("- " + V, 15, White)   
        }
        
        vec2(10, Pos[2]):brText(50, vec2((512/2)-20, 50), Yellow, "[E] BUY TEMP! $" + BUY:comma())
        vec2(512/2, Pos[2]):brText(51, vec2((512/2)-20, 50), Yellow, "[E] BUY PERM! $" + BUY_PERM:comma())   
    
        return Pos
    }
    
    function void draw() {
        EGP_ID = 10
        
        "DarkGray":clear()
        
        local Pos = vec2(10, 10)
        
        if (!loggedIn()) {
            login()
            drawCursor()
            return   
        }
        
        local D = 0
        switch (Page) {
            case "admin",
                admin()
                D = 1    
            
            break
            
            case "confirm",
                confirm()
                D = 1
            
            break
            
            case "membership",
                Pos[1] = 15
                Pos:membership()
                D = 1
            
            break
            
            case "deposit",
                deposit(),
                D = 1
            
            break
            
            case "moneybox",
                moneybox()
                D = 1
            
            break
            
            case "moneybox_close",
                moneybox_close()
                D = 1
            break
            
            case "deposit_close",
                deposit_close()
                D = 1
            break
        }
        
        if (D) { return }
        
        Pos = Pos:heading(TITLE)
        
        Pos[1] = 15
        Pos[2] = Pos[2] + 40
        
        if (0) {
        
        local Bef = Pos
        vec2(Pos[1]-1, Pos[2]-1):round_button(vec2((512/2)-20+2, 100+2), "Yellow":colour())
        Pos = Pos:round_button(66, vec2((512/2)-20, 100), "Gray":colour())
        Bef:text((512/2)-20, 100, "DEPOSIT PRINTERS", 25, "Yellow":colour())
        
        local X = (512/2)
        local Y = Bef[2]
        vec2(X-1, Y-1):round_button(vec2(X-15+2, 100+2), "Yellow":colour())
        Pos = vec2(X, Y):round_button(67, vec2(X-15, 100), "Gray":colour())
        vec2(X, Y):text(X-15, 100, "DEPOSIT DIRTY MONEY", 25, "Yellow":colour())
        
        Pos = vec2(Bef[1], Pos[2])
        } else {
            
        local DTC = Settings["deposit", number] ? "Yellow":colour() : "Red":colour()
        local MTC = Settings["money", number] ? "Yellow":colour() : "Red":colour()
        
        local Bef = Pos
        
        Pos[1] = (512/4)+12
        
        vec2(Pos[1]-1, Pos[2]-1):round_button(vec2((512/2)-20+2, 100+2), DTC)
        Pos = Pos:round_button(66, vec2((512/2)-20, 100), "Gray":colour())
        Bef:text((512/2)-20, 100, "DEPOSIT RACK", 25, DTC)
        
        local Bef = Pos
        Pos[2] = Pos[2] + 35
        
        vec2(Pos[1]-1, Pos[2]-1):round_button(vec2((512/2)-20+2, 100+2), MTC)
        Pos = Pos:round_button(67, vec2((512/2)-20, 100), "Gray":colour())
        Bef:text((512/2)-20, 100, "DEPOSIT DIRT MONEY", 25, MTC)
        
        
        Pos = vec2(15, Pos[2] + 50)
           
        }
        
        
        
        Pos = vec2(120, Pos[2]):brText(65, vec2(W-120*2, 30), "Yellow":colour(), "Go to Membership/Statistics Page")
    }
    
    function void entity:msg(M:string) {
        concmd("sam pm " + This:steamID() + "\"" + M + "\"")   
    }
    
    function void gmsg(M:string) {
        concmd("say /p " + M)   
    }
    
    function void entity:msgSupport() {
        gmsg(This:name() + " has requested a Commbank Team Member.")
            
            timer("timer", 1000)
            Timer = 5
            alert()
            6:setText("Please wait " + Timer + " seconds.")   
    }
    
    function entity entity:onLogout() {
        Support = 5000  
        timer("close_boxes", 4000)
        return This 
    }
    
    function entity entity:handleButtons() {
        if (5:isPressed() && Timer <= 0) {
            if (!Support) {
                This:msgSupport()   
            } else {
                moneyRequest(This, 5000, "Support")
            }
        } elseif (2:isPressed() && Page != "main") {  
            goto("main")
            MONEY = 0
            DEPOSIT = 0
        } elseif (50:isPressed()) {
            moneyRequest(LockedUser, BUY, TITLE + " Commership")    
        } elseif (51:isPressed()) {
            moneyRequest(LockedUser, BUY_PERM, TITLE + " PERM Commership")    
        } elseif (60:isPressed() && Page != "confirm") {
            goto("confirm")
        } elseif (61:isPressed() && Page != "admin") {
            goto("admin") 
        } elseif (63:isPressed()) {
            Membership:remove(This:steamID())
            writeMembers()
            goto("main")   
            update_member_string()
        } elseif (65:isPressed()) {
            goto("membership")   
        } elseif (66:isPressed()) {
            if (!Settings["deposit", number]) {
                beep("buttons/combine_button_locked.wav")
                return This
            }
            
            goto("deposit")
        } elseif (67:isPressed()) {
            if (!Settings["money", number]) {
                beep("buttons/combine_button_locked.wav")
                return This 
            }
            
            goto("moneybox")   
        } elseif (68:isPressed()) {
            Settings["deposit", number] = !Settings["deposit", number]  
            redraw()
        } elseif (69:isPressed()) {
            Settings["money", number] = !Settings["money", number]
            redraw()   
        } elseif (266:isPressed()) {
            # OPEN DEPOSIT BOX
            DEPOSIT = 1
            goto("deposit_close")
            redraw()   
        } elseif (267:isPressed()) {
            # OPEN MONEY BOX
            MONEY = 1
            goto("moneybox_close")
            redraw()   
        } elseif (268:isPressed()) {
            # CLOSE DEPOSIT BOX
            DEPOSIT = 0
            goto("main")
            redraw()   
        } elseif (269:isPressed()) {
            # CLOSE MONEY BOX
            MONEY = 0
            goto("main")
            redraw()   
        }
        
        local C = 0
                
        foreach (Name:string, Data:table = TempPackages) {
            if ((150+C):isPressed() && !This:hasPackage(Name)) {
                moneyRequest(This, Data["Price", number], "PKG " + Name)
            }
            
            C++
        }

        if (Page != "admin") { return This }
        
        foreach (N:string, ID:string = User_cache) {
            local Num = N:toNumber()
            if (Num:isPressed()) {
                Membership:remove(ID)
                update_member_string()
                writeMembers()
                draw()
            }   
        }
        
        return This
    } 
    
    function void entity:addPackage(Title:string) {
        if (!This:isMember()) {
            return   
        }
        
        if (Title:sub(1, 3) != "PKG") {
            return   
        }
        
        local PKG = Title:sub(5)
        
        print(PKG)
        
        if (This:hasPackage(PKG)) {
            print(This:name() + " already has " + PKG)   
            return
        }
        
        local Mem = Membership[This:steamID(), table]
        if (Mem["Packages", array]:count() == 0) {
            Mem["Packages", array] = array(PKG)
        } else {
            Mem["Packages", array]:pushString(PKG)
        }
        
        redraw()
    }
    
    function void goto(N:string) {
        Page = N
        alert()
        draw()
    }
    
    function number entity:setUser() {
        if (LockedUser != noentity()) {
            return 0
        }
        
        LockedUser = This
        WAITING_TO_CLOSE = 0
        stoptimer("close_boxes")
        DEPOSIT = 0
        MONEY = 0

        return 1
    }
    
    function void autoLockout() {
        if (!AutoLockout) {
            return 
        }
        
        if (!LockedUser:isValid()) {
            return
        }

        if (LockedUser:distanceFromScreen() > AutoLockoutDistance) {
            if (MONEY <= 0 && DEPOSIT <= 0) {
                clearUser()
                redraw()
            } else {
                if (!WAITING_TO_CLOSE) {
                    timer("close_boxes", 4000)   
                }   
            }
        }
    }
    
    function void entity:parse(CMD:string, _:array) {
        if (This != owner()) { return }
        
        switch (CMD) {
            case "SET",
                local Aim = This:aimEntity()
                if (Aim:type() == "gmod_wire_expression2") {
                    Aim:setAllowed()
                    print(Aim:type(), " owned by " + Aim:owner():name() + " can send statistics to the panel.")
                } else {
                    print(Aim:type(), " is not a e2 chip!")   
                }
            
            break    
        }   
    }
    
    draw()  
}

event fileLoaded(Name:string, Content:string) {
    if (Name == "commbank_stats.txt") {
        local Stuff = jsonDecode(Content)
        Membership = Stuff["users", table]
        Statistics = Stuff["stats", table]
        
        foreach (SID:string, Data:table = Membership) {
            if (Data["type", number] == 1) {
                Membership:remove(SID)
            }   
        }
        
        print("{*LOADED COMMBANK USERS & STATISTICS}")
        update_member_string()
    } 
}

event chat(Entity:entity, T:string, _) {
    if (Entity == owner() && T:sub(1, 1) == "$") {
        local ARGS = T:sub(2):explode(" ")
        local COMMAND = ARGS[1, string]:upper()
        ARGS:shift()
        
        Entity:parse(COMMAND, ARGS)
    }   
}

if(moneyClk()) {
    local PLY = moneyClkPlayer()
    local Amount = moneyClkAmount()
    local Title = moneyClkTitle()
    
    if (Amount == BUY) {
        PLY:setMember(1)
        draw()
    } elseif (Amount == BUY_PERM) {
        PLY:setMember(2)
        draw()
    } elseif (Title == "Support") {
        Support = 0
        PLY:msgSupport()
    } else {
        PLY:addPackage(Title)   
    }
}

local DCLK = dsClkName()
if (DCLK) {
    switch (DCLK) {
        case "update_stats",
            local Sender = dsGetSender()
            if (Sender:isAllowedSend()) {                
                local Data = dsGetTable()
                local Entity = Data["entity", entity]
                local Name = Data["name", string]
                local Amount = Data["amount", number]
                
                local ID = Entity:steamID()

                if (!Statistics:exists(ID)) {
                    Statistics[ID, table] = table()
                }
        
                Statistics[ID, table][Name, number] = Statistics[ID, table][Name, number] + Amount
                
                stoptimer("write")
                timer("write", 5000)
            }
        
        break
    }   
}

if(clk("write")) {
    writeMembers()   
}

if(clk("timer")) {
    Timer--
    if(Timer > 0) {
        timer("timer", 1000)
        6:setText("Please wait " + Timer + " seconds.")
    } else {
        6:setText("Request Commbank Staff")   
    }
}

if(clk("draw")) {
    draw()       
}

if(clk("close_boxes")) {
    MONEY = 0
    DEPOSIT = 0   
}

if(clk("heading_x")) {
    Heading_X = Heading_X + 15
    Heading_ID:setX(Heading_X)
    if ((Heading_X+15) <= Original_X) {
        timer("heading_x", 35)
    }    
}

if (~MemberScreen && ->MemberScreen) {
    MemberScreen["FGColor", vector] = "DarkGray":colour()
    MemberScreen["BGColor", vector] = "Yellow":colour()
    update_member_string()
}
