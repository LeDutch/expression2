@name Gun Garage
@inputs [U1 U2 U3 U4 U5 U6 U7 U8 U9 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20]:wirelink
@persist [Users]:array 
@persist [Shipments Categories Cart Menu Selection Dispense Customers]:table
@persist [Tax Profit Page Screen CartPage Disable MembershipPrice Discount]:number
@persist [Profile]:entity
@persist [Option]:string

# Automagically Compiled via https://egpcompiler.com (Credits Odin & Bob Tomato)

if (first() || dupefinished() || ~EGP) {
    #include "library/tomato_lib"
    #include "themes/gunstore/gungarage"
    
    #---------- Global Vars -----------#
    Prefix = "Gun Garage"
    PrefixColour = "grey"
    Screen = 1
    Page = 1
    CartPage = 1
    Profit = 20
    Tax = 0
    Profile = noentity()
    Option = "All"
    Animation = 0
    Disable = 0 
    MembershipPrice = 1000000
    
    Users = array()
    Menu = table()
    Shipments = table()
    Dispense = table()
    Customers = table()
    DataSender = table()
    Cart = table(
        "Count" = 0,
        "NetTotal" = 0,
        "Total" = 0,
        "Items" = table()
    )
    Categories = table(
        "Pistols" = array("Desert Eagle","MP 412 Rex","M1911","P99","PM Makarov"),
        "SMGs" = array("H&K G36C","MAC-11","MP5","MP7","MP9","UMP 45"),
        "Shotguns" = array("M3 Super 90","M4 Super 90","Saiga-12K","Shorty Shotgun"),
        "Rifles" = array("HK-416","AR-15","AK-74","AN-94","FAMAS","FN FAL","G3A3","Magpul Masada","M14","M16A2","M16A4","M4A1","SCAR-H","XM8"),
        "Snipers" = array("AWM Sniper Rifle","G2 Contender","AL115 Rifle","M98B Sniper Rifle","SVD"),
        "Heavy"= array("M249 LMG"),
        "Armour" = array("Light Armor","Medium Armor","Heavy Armor"),
        "Explosives" = array("IED Detonator","M202 Rocker Launcher","M79 Grenade Launcher","Milkor Mk1 Grenade Launcher","Proximity Mine","RPG-7","Timed C4"),
        "Melee" = array("Throwing Knife")
    )
    

    #---------- Gunstore Functions -----#
    function entity wirelink:getShipment() {
        return This["Entity", entity]
    }
    
    function wirelink entity:getWirelink() {
        foreach (_:number, V:wirelink = Users) {
            if (This == V:entity()) {
                return V
            }
        }
        return nowirelink()
    }
    
    function void wirelink:fire() {
        This["Fire", number] = 1
        timer(This:entity():id():toString(), 100)
    }
    
    function entity wirelink:getEntity() {
        let Length = 100
        let UserEntity = This:entity()
        if(!UserEntity:isValid()) {
            return noentity()
        }
        
        rangerReset()
        rangerFlags("IE")
        rangerFilter(UserEntity)
        local Ranger = rangerOffset(Length, UserEntity:toWorld(UserEntity:up()), UserEntity:up())
        
        return Ranger:entity()
    }
    
    function string table:getCategory(Name:string) {
        let Keys = This:keys()
        for (I=1, This:count()) {
            let Array = This[Keys[I, string], array]
            if (Array:findString(Name)) {
                let Keys = This:keys()
                return Keys[I, string]
            }
        }
        return "No Category Found"
    }
    
    function void getShipments() {
        Shipments = table()
        for (I = 1, 20) {
            let Scan = Users[I, wirelink]:getEntity()
                if (Scan:isValid() && Scan:isShipment()) {
                    let Name = Scan:shipmentName()
                    let Cost = Scan:shipmentPrice()
                    let Size = Scan:shipmentSize()
                    let Category = Categories:getCategory(Name)
                        
                    if (Category == "No Category Found") {
                        print(Name + ": Category not found contact Bob Tomato")
                    }
                        
                    if (!Menu:exists(Category)) {
                        Menu[Category, number] = 1
                    }
                    else {
                        Menu[Category, number] = Menu[Category, number] + 1
                    }
                        
                    Shipments[Name, table] = table(
                        "Name" = Name,
                        "Size" = Size,
                        "Stock" = Scan:shipmentAmount(),
                        "Price" = Cost/Size*(Profit/100+1),
                        "Category" = Category,
                        "User" = Users[I, wirelink],
                        "Cart" = 1
                    )
                }
        }
    }
    
    function table table:sortShipments(Category:string) {
        let Table = table()
        let Keys = This:keys()
        if (Category == "All") {
            for (I=1, This:count()) {
                let Item = This[Keys[I, string], table]
                let Name = Item["Name", string]
                Table:pushTable(This[Name, table])
            }
            createDropdown("Category", size(vec2(187.0, 25)), coords(vec2(257.0,69)))
        }
        else {
            for (I=1, This:count()) {
                let Item = This[Keys[I, string], table]
                if(Item["Category", string] == Category) {
                    let Name = Item["Name", string]
                    Table:pushTable(This[Name, table])
                }
            }
        }
        return Table
    }
    
    function void table:addToCart(Item:table) {
        let Name = Item["Name", string]
        let Items = This["Items", table]
        let NetTotal = 0
        let CartCount = 0
        
        if (Items:exists(Name)) {
            if(Item["Stock", number] == Item["Cart", number]) {
                User:msg("Cannot add more of this item.")
            }
            else {
                This["Items", table][Name, table]["Cart", number] = Items[Name, table]["Cart", number] + 1
            }
        }
        else {
            This["Items", table][Name, table] = Item
            This["Items", table][Name, table]["Cart", number] = 1
        }
         
        let Keys = Items:keys()
        for(I=1, Items:count()) {
            let Gun = Items[Keys[I, string], table]
            NetTotal += Gun["Price", number]*Gun["Cart", number]
            CartCount += Gun["Cart", number]
        }
        This["Count", number] = CartCount
        This["NetTotal", number] = NetTotal
        This["Total", number] = NetTotal + NetTotal*(Tax/100)
    }
    
    function number getTax() {
        let TaxLevels = table(
            "1" = 0,
            "2" = 25,
            "3" = 37.5,
            "4" = 50,
            "5" = 62.5
        )
        return TaxLevels[tauTaxFactor(), number]
    }
    
    function void clearCart() {
        Cart = table(
            "Count" = 0,
            "NetTotal" = 0,
            "Total" = 0,
            "Items" = table()
        )
        getShipments()
        screen_buy()
    }
    
    function void saveSale() {
        let Amount = 0
        foreach(_:string, Item:table = Cart["Items", table]) {
            Amount += Item["Cart", number]
        }
        let NetTotal = Cart["NetTotal", number]
        let Sale = table(
            "Steam" = Profile:steamID(),
            "Name" = Profile:name(),
            "Profit" = NetTotal*(Profit/100),
            "ItemCount" = Amount,
            "Revenue" = Cart["Total", number],
            "Tax" = NetTotal*(Tax/100),
            "Cart" = Cart
        )
        broadcastRemoteEvent(Sale)
    }
    
    #---------- Visual Functions ------#
    
    function void loadPage(Option:string) {
        let Membership = Customers[Profile:steamID(), table]["Membership", number]
        if (Membership) {
            EGP:egpSetText(Elements:get("MembershipText"), "Welcome back, " + formatName(Profile:name(), 10))
        }
        Selection = Shipments:sortShipments(Option)
        EGP:egpSetText(Elements:get("PageNum"), "Page " + Page + "/" + ceil(Selection:count()/5))
        for (I=1,5) {
            let Index = pageIndex(I, Page, 5)
            let Item = Selection[Index, table]
            if (Item:count()) {
                itemCreate(I, Item, 7, Cart, Tax, Discount)
            }
            elseif(EGP:egpHasObject(Elements:get("Item"+I)) || EGP:egpHasObject(Elements:get("CartAmount"+I))) {
                itemDelete(I)
            }
        }
    }
    
    function changeScreen(Num:number) {
        Screen = Num
        animations(Screen)
        switch (Screen) {
            case 1, 
                screen_initial(0)
                getShipments()
            break
            case 2,
                screen_buy()
                loadPage("All")
                screen_footer(Discount, Tax, Cart, 1)
                masks()
            break
            case 3,
                screen_initial(1)
            break
            case 5,
                deleteCart()
                loadPage(Option)
            break
        }
        timer("startanimation", 100)
    }
    
    function void resetScreen() {
        Menu = table()
        Profile = noentity()
        Page = 1
        Discount = 0
        clearCart()
        changeScreen(3)
    }
    
    screen_initial(0)
    timer("tax", 1000)
    timer("proximity", 1000)
    timer("link", 100)
}

interval(100)
if (~U1 || ~U2 || ~U3 || ~U4 || ~U5 || ~U6 || ~U7 || ~U8 || ~U9 || ~U10 || ~U11 
|| ~U12 || ~U13 || ~U14 || ~U15 || ~U16 || ~U17 || ~U18 || ~U19 || ~U20 
|| first() || dupefinished() || ~EGP) {
    for (I = 1, 20) {
        const Wirelink = ioGetInputWirelink("U" + I)
        const Entity = Wirelink:entity()
        Users:pushWirelink(ioGetInputWirelink("U" + I))
        if (Entity:isValid()) {
            Entity:setColor(vec(0,255,0))
        }
    }
}

if (userInput(Profile)) {
    let Buttons = array("CartDelete", "Category", "BackPage", "NextPage", "CartButton", "Membership")
    let Count = Cart["Items", table]:count()
    let FooterAmount = Count > 10 ? 10 : Count
    if (Screen==4) {
        for (I=1, FooterAmount) {
            Buttons:pushString("Minus"+I)
            Buttons:pushString("Plus"+I)
        }
        Buttons:pushString("BackCartPage")
        Buttons:pushString("NextCartPage")
    }
    else {
        Buttons:pushString("Checkout")
        for (I=1, 5) {
            let Index = pageIndex(I, Page, 5)
            let Item = Selection[Index, table]
            if (Item:count()) {
                Buttons:pushString("ItemBuy"+I)
            }
        }
    }
    let Cursor = cursorObj(Buttons, User)
    switch (Cursor) {
        case "Category",
            let Options = Menu:keys()
            Options:pushString("All")
            let Index = useDropDown("Category", Options)
            if (Index) {
                Page = 1
                Option = Options[Index, string]
                loadPage(Option)
            }
        break
        case "Checkout",
            let Count = Cart["Items", table]:count()
            if (Count) {
                moneyRequest(Profile, Cart["Total", number] - Discount, "Buy cart?")
            }
            else {
                Profile:msg("There is nothing in your cart.")
            }
        break
        case "BackPage",
            if (Page > 1) {
                Page--
                loadPage(Option)
                screen_footer(Discount, Tax, Cart, 0)
            }
        break
        case "NextPage",
            if (Page < ceil(Selection:count()/5)) {
                Page++
                loadPage(Option)
                screen_footer(Discount, Tax, Cart, 0)
            }
        break
        case "BackCartPage",
            if (CartPage > 1) {
                Page--
                createCart("CartButton", CartPage, Cart["Items", table])
            }
        break
        case "NextCartPage",
            if (CartPage < ceil(Cart:count()/FooterAmount)) {
                CartPage++
                createCart("CartButton", CartPage, Cart["Items", table])
            }
        break
        case "CartDelete",
            Screen = 3
            clearCart()
            loadPage(Option)
            screen_footer(Discount, Tax, Cart, 0)
        break
        case "CartButton",
            if(Cart["Items", table]:count()) {
                if (Screen == 4) {
                    changeScreen(5)
                    loadPage(Option)
                    let Items = Cart["Items", table]
                    let Keys = Items:keys()
                    let CartCount = 0
                    for(I=1, Items:count()) {
                        let Gun = Items[Keys[I, string], table]
                        CartCount += Gun["Cart", number]
                    }
                    Cart["Count", number] = CartCount
                    EGP:egpSetText(Elements:get("CartNum"), "Cart (" + Cart["Count", number] + ")")
                }
                else {
                    let Credits = Customers[Profile:steamID(), table]["Credits", number]
                    changeScreen(4)
                    EGP:egpAlpha(Elements:get("CartMask"), 255)
                    if (Credits) {
                        Profile:msg("You have " + Credits + " reward points, type !credit to apply.")
                    }
                }
            }
            else {
                Profile:msg("There are no items in the cart.")
            }
        break
        case "Membership",
            let Membership = Customers[Profile:steamID(), table]["Membership", number]
            let Credits = Customers[Profile:steamID(), table]["Credits", number]
            if (Membership) {
                Profile:msg("You have " + Credits + " credits.")
            }
            else {
                moneyRequest(Profile, MembershipPrice, "Buy permanent membership?")
            }
        break
        default,
            let FooterAmount = Count > 10 ? 10 : Count
            for(I=1, FooterAmount) {
                if(Cursor == "Minus"+I) {
                    let Keys = Cart["Items", table]:keys()
                    let Index = Keys[pageIndex(I, CartPage, 10), string]
                    let Item = Cart["Items", table][Index, table]
                    Item["Cart", number] = Item["Cart", number] - 1
                    if (Item["Cart", number] == 0) {
                        Cart["Items", table]:removeTable(Index)
                    }
                    if (!Cart["Items", table]:count()) {
                        Screen = 3
                        clearCart()
                        loadPage(Option)
                        screen_footer(Discount, Tax, Cart, 0)
                    }
                    else {
                        createCart("CartButton", CartPage, Cart["Items", table])
                    }
                }
                elseif(Cursor == "Plus"+I) {
                    let Keys = Cart["Items", table]:keys()
                    let Index = Keys[pageIndex(I, CartPage, 10), string]
                    let Item = Cart["Items", table][Index, table]
                    Cart:addToCart(Item)
                    createCart("CartButton", CartPage, Cart["Items", table])
                }
            }
            for(I=1, 5) {
                if(Cursor == "ItemBuy"+I) {
                    let Index = pageIndex(I, Page, 5)
                    let Item = Selection[Index, table]
                    Cart:addToCart(Item)
                    itemCart(I, Item, 7, Cart, Tax, Discount)
                }
            }
        break
    }
}
elseif(userInput() && !Profile:isValid() && !Disable) {
    let Blacklist = Customers[User:steamID(), table]["Blacklist",string]
    if(Blacklist) {
       User:msg("You have been blacklisted, reason: " + Blacklist)
    }
    else {
        Profile = User
        changeScreen(1)
    }
}
elseif(userInput()) {
    User:msg("The store is temporarily disabled. Sorry for the inconvenience!")
}

if(moneyClk()) {
    if (moneyClkTitle() == "Buy permanent member") {
        broadcastRemoteEvent(table(
            "Member" = Profile:steamID(),
            "Name" = Profile:name()
        ))
        Customers[Profile:steamID(), table]["Membership", number] = 1
        Profile:msg("Thank you for buying permanent membership!")
        Profile:msg("All future purchases will give increased reward points.")
        resetScreen()
    }
    else {
        let Percent = Customers[Profile:steamID(), table]["Membership", number] ? 2.5 : 1
        let Credits = floor(Cart["NetTotal", number]*Percent/100)
        Discount = 0
        Dispense = Cart["Items", table]
        saveSale()
        clearCart()
        screen_footer(Discount, Tax, Cart, 0)
        timer("dispense", 0)
        Profile:msg("Thank you for your purchase.")
        Profile:msg("You have recieved " + Credits + " reward points.")
        Customers[Profile:steamID(), table]["Credits", number] = Customers[Profile:steamID(), table]["Credits", number] + Credits
    }
}


let CLK = clkName()
if (CLK) {
    switch (CLK) {
        case "proximity",
            if(Profile:isValid() && !Dispense:count()) {
                if(!proximityCheck(Profile, 150)) {
                    resetScreen()
                }
            } 
            timer("proximity", 1000)
        break
        case "link",
            broadcastRemoteEvent(table("ID"=entity():id()))
        break
        case "tax",
            let GetTax = getTax()
            if (GetTax != Tax) {
                owner():msg("Tax level changed to: " + GetTax + "%.")
                Tax = GetTax
            }
            timer("tax", 10000)
        break
        case "dispense",
            if (Dispense:count()) {
                foreach(Key:string, Item:table = Dispense) {
                    let Amount = Item["Cart", number]
                    if (!Amount) {
                        let Stock = Shipments[Key, table]["Stock", number]
                        Dispense:removeTable(Key)
                        if (!Stock) {
                            Shipments:removeTable(Key)
                        }
                    }
                    else {
                        let User = Item["User", wirelink]
                        Item["Cart", number] = Item["Cart", number] - 1
                        User["Fire", number] = 1
                        Shipments[Key, table]["Stock", number] = Shipments[Key, table]["Stock", number] - 1
                    }
                }
                timer("dispense", 1000)
            }
            loadPage(Option)
        break
        case "startanimation",
            Animation = 1
            timer("animation", 0)
        break 
        case "footer",
            screen_footer(Discount, Tax, Cart, 0)
        break
        case "animation",
            if (Animation) {
                if (Screen == 4) {
                    let Count = Cart["Items", table]:count()
                    let FooterAmount = Count > 10 ? 434 - 10 * 18 : 434 - Count * 18
                    animations(Screen, FooterAmount)
                }
                else {
                    animations(Screen)
                }
                timer("animation", 25)
            }
        break
        case "menu",
            changeScreen(2)
        break
        case "createcart",
            createCart("CartButton", CartPage, Cart["Items", table])
        break
        case "logout",
            Screen = 1
        break
        default,
        break
    }
}

event chat(Player:entity, Message:string, _:number) {
    if (Player == owner() && Message[1] == "!") {
        Arguments = Message:sub(2):explode(" ")
        Command = Arguments:shiftString()
        hideChat(1)
        switch (Command) {
            case "profit",
                let Percentage = Arguments[1,string]:toNumber()
                if (Percentage) {
                    Profit = Percentage
                    Player:msg("Profit percent set to " + Percentage + "%.")
                    resetScreen()
                    broadcastRemoteEvent(table("ProfitPercent"=Percentage))
                }
            break,
            case "membership",
                let Amount = Arguments[1,string]:toNumber()
                if (Amount) {
                    MembershipPrice = Amount
                    Player:msg("Membership price set to $" + Amount)
                }
            break
            case "tax",
                let Amount = Arguments[1,string]:toNumber()
                if (Amount) {
                    Tax = Amount
                    Player:msg("Tax set to " + toString(Amount) + "%")
                }
                else {
                    Player:msg("Tax percentage is " + toString(getTax()) + "%")
                }
            break
            case "credits",
                let Player = Arguments[1,string]:findPlayer()
                let Amount = Arguments[2,string]:toNumber()
                if (Player:isValid() && Amount) {
                    let Steam = Player:steamID()
                    let Credits = Customers[Steam, table]["Credits", number]
                    if (!Customers:exists(Steam)) {
                        Customers[Steam, table] = table()
                    }
                    Customers[Player:steamID(), table]["Credits", number] = Credits + Amount
                    Player:msg("Added " + Amount + " session credits to " + Player:name())
                    owner():msg("Added " + Amount + " session credits to " + Player:name())
                }
            break
            case "blacklist",
                let BannedPlayer = Arguments[1, string]:findPlayer()
                let Reason = Arguments[2, string]
                let Perm = Arguments[3, string]
                if (BannedPlayer:isValid() && Reason != "") {
                    let Name = BannedPlayer:name()
                    let Steam = BannedPlayer:steamID()
                    if (!Customers:exists(Steam)) {
                        Customers[Steam, table] = table()
                    }
                    Customers[BannedPlayer:steamID(), table]["Blacklist", string] = Reason
                    Player:msg(Name + " has been added to the blacklist: " + Reason)
                    if (Perm:lower() == "perm") {
                        broadcastRemoteEvent(table("Blacklist"=table(
                        "Steam" = BannedPlayer:steamID(),
                        "Reason" = Reason
                        )))
                    }
                    if(Profile == BannedPlayer) {
                        Profile:msg("You have been blacklisted.")
                        resetScreen()
                    }
                }
                else {
                    Player:msg("Invalid syntax: !blacklist (reason) ?perm")
                }
            break
            case "unblacklist",
                let BannedPlayer = Arguments[1, string]:findPlayer()
                let Steam = BannedPlayer:steamID()
                if (Customers[Steam, table]["Blacklist", string]) {
                    Customers[Steam, table]:removeString("Blacklist")
                    Player:msg(BannedPlayer:name() + " has been removed from the blacklist.")
                    broadcastRemoteEvent(table("Blacklist"=BannedPlayer:steamID()))
                }
                else {
                    Player:msg("That player is not in the blacklist.")
                }
            break
            case "help",
            local Help = array(
                "!profit (number) - change profit percentage",
                "!membership (number) - change membership price",
                "!tax (number) - manually change tax amount",
                "!credits (name) (number) - add session credits to user.",
                "!blacklist (name) (reason) (option - perm) - ban a player temporarily or permanently",
                "!unlacklist (name) - remove player from the blacklist",
                "!reset - resets database if admin terminal is connected.")
                foreach(_:number, Syntax:string = Help) {
                    owner():msg(Syntax)
                }
            break
            default,
            break
        }
    }
    if(Player == Profile) {
        Arguments = Message:sub(2):explode(" ")
        Command = Arguments:shiftString()
        hideChat(1)
        switch (Command) {
            case "credit",
                let Credits = Customers[Profile:steamID(), table]["Credits",number]
                let Total = Cart["Total", number]
                
                if (Credits > Total) {
                    Credits = Total
                }
                Customers[Profile:steamID(), table]["Credits",number] = Customers[Profile:steamID(), table]["Credits",number] - Credits
                
                Profile:msg("Applied $" + Credits + " discount to cart.")
                Discount = Credits
                Cart["Total", number] = Total - Credits
                
                if (Screen == 4) {
                    changeScreen(5)
                }
                else {
                    screen_footer(Discount, Tax, Cart, 0)
                }
                
                broadcastRemoteEvent(table("Credits" = Credits, "Steam" = Profile:steamID()))
                
            break
            default,
            break
        }
    }
}

event remote(Sender:entity, Player:entity, Payload:table) {
    if (Player == owner()) {
        let Command = Payload["Command", string]
        switch (Command) {
            case "req",
                timer("link", 500)
            break
            case "members",
                let Membership = Payload["Membership", number]
                if(Membership) {
                    MembershipPrice = Membership
                    Customers = Payload["Customers", table]
                    owner():msg("Recieved customer data.")
                }
            break
            case "reset",
                Customers = table()
            break
            case "profit",
                Profit = Payload["Profit", number]
                owner():msg("Profit changed to " + Profit + "%")
            break
            case "disable",
                Disable = Payload["Disable", number]
                if (Disable && Screen != 1) {
                    resetScreen()
                }
            break

        }
    }
}
