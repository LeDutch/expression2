@name Tomato Items Storage
@outputs [Customers Revenue]:number [V1 V2 V3 V4 V5 V6 V7 V8 V9 V10]:string
@persist [DB]:table
@persist [Vault]:number
@persist [BankName CurrentDate]:string

if (~EGP) {reset()}
if(first() || dupefinished()) {
    #include "library/tomato_lib"
    Vault = 1
    
    local Date = dateUTC()
    CurrentDate = toString(Date["day", number])+"/"+toString(Date["month", number])+"/"+toString(Date["year", number])

    #Ease of use functions
    function checkStorage(VaultId) {
        local Vault = DB["Vaults", table][VaultId, table]
        local Steam = Vault["Account", entity]:steamID()
        local Min = Vault["Corner1", vector]
        local Max = Vault["Corner2", vector]
        if (Min != vec() && Max != vec()) {
            findInBox(Min, Max)
                
            local Items = array()
            local Printers = array()
            foreach(_:number, Item:entity = findToArray()) {
                local Type = Item:type()
                if (Type:startsWith("player") || Type:startsWith("man") || Type:startsWith("wire") || Type:startsWith("prop") || Type:startsWith("Gmod") || Type:startsWith("Env")) {
                    continue
                }
                elseif (Type:startsWith("printer_rack") || Type:startsWith("bitminer_tower")) {
                    DB["Customers", table][Steam, table][Item:id():toString(),entity] = Item
                    Items:pushString(Type)
                }
                elseif (Type:startsWith("printer_")) {
                    Printers:pushString(Type)
                }
                else {
                    Items:pushString(Type)
                }            
            }
            DB["Customers", table][Steam, table]["Printers", table][CurrentDate, array] = Printers
            DB["Customers", table][Steam, table]["Items", table][CurrentDate, array] = Items
        }
    }
    timer("count",  1000)
    broadcastRemoteEvent(table())
}

event remote(Sender:entity, Player:entity, Payload:table) {
    if (Player == owner()) {
        DB = Payload
    }
}

if(clk("count")) {
    Revenue = DB["Profit",table]["Total", number] + DB["Tax",table]["Total", number]
    Customers = DB["Customers",table]:count()
    local Customer = DB["Vaults", table][Vault, table]
    local Entity = Customer["Account", entity]
    if (Entity:isValid()) {
        local Time = Customer["Time", number]
        local Collect = DB["Customers", table][Entity:steamID(), table]["DisableCollect", number] ? "Do not collect" : "Collect" 
        ioSetOutput("V"+Vault, "Vault " + Vault + "\n----------------\n " + formatName(Entity:name(), 18) + "\n Time: " + formatNumber(Time) + " mins\n\n" + Collect)
    }
    else {
        ioSetOutput("V"+Vault, "Vault "+Vault)
    }
    
    checkStorage(Vault)
    if (Vault == DB["Vaults", table]:count() - 1) {
        Vault = 1
    }
    else {
        Vault += 1
    }
    timer("count",  1000)
}

