@name Tomato Terminal
@inputs
@outputs
@persist [Profile PayEntity]:entity 
@persist [BankName CurrentDate]:string 
@persist [I VaultSelected Screen MembershipPrice]:number
@persist [PayAmount Amount]:number
@persist [Ticket]:table 
@persist [PlayerList]:array
@persist [DB]:table
@autoupdate

###################################################
#Coded by Bob Tomato, any changes or reqs /pm me :)
###################################################

if (~EGP) {reset()}
if (first() || dupefinished()) {
    #include "library/tomato_lib"
    #include "library/tomato_animations"
    #include "themes/bank/tomato_betterbank"
    
    User = noentity()
    Profile = User
    
    #Setting up
    VaultSelected = 0
    MembershipPrice = 1000000
    BankName = "BetterBank"
    Prefix = BankName
    Ticket = table()
    
    local Date = dateUTC()
    CurrentDate = toString(Date["day", number])+"/"+toString(Date["month", number])+"/"+toString(Date["year", number])
    
    function changeScreen(Num) {
        Animation = 1
        Screen = Num
        timer("changed", 100)
    }
    
    function updateTime(Num) {
        local Vault = DB["Vaults", table][Num,table]
        local Time = Vault["Time", number]
        local Name = Vault["Name", string]
        if (Time) {
            local Text = ""
            if (Time < 2) {Text = "min"}
            else {Text = "mins"}
            EGP:egpSetText(Elements:get("Vault "+Num),Name + ": " + Time + Text)
        }
    }
    
    function checkButtons(Name:string, Targets:array) {
        local Count = Targets:count()
        for (I = 1,Count){ 
            local ButtonID = Elements:get(Name+I)
            if(cursorPos(ButtonID, Profile)) {
                if (EGP:egpColor(ButtonID) != Secondary) {
                    EGP:egpColor(ButtonID, Secondary)
                }
                elseif (Profile:keyPressed("E")) {
                    local Target = Targets[I, number]
                    changeScreen(Target)
                }
            }
            elseif(EGP:egpColor(ButtonID) != Primary) {
                EGP:egpColor(ButtonID, Primary)
            }
        }
    }
    
    function checkPayRequests() {
        local Slider = useSlider("Pay", 1000, 500000, 1000)
        local Dropdown1 = useDropDown("Select Player:", PlayerList, 11)
        if (Slider) {PayAmount = Slider}
            
        if (PayAmount) {
            EGP:egpSetText(Elements:get("Pay Amount: $0"), "Pay Amount: $"+PayAmount)
        }
        if(Dropdown1) {
            PayEntity = PlayerList[Dropdown1, string]:findPlayer()
        }
        local PayID = Elements:get("PayButton")
        local ChatID = Elements:get("PayBox")
        if(cursorPos(PayID, Profile)) {
            EGP:egpColor(PayID, Secondary)
            if (Profile:keyPressed("E")) {
                if (PayAmount & PayEntity:isValid()) {
                    moneyRequest(Profile, PayAmount, "Pay " + PayEntity:name() + "?")
                }
                else {
                    Profile:msg("Please fill out all required information.")
                }
            }
            Animation = sleep(2)
        }
        elseif (cursorPos(ChatID, Profile)) {
            EGP:egpColor(ChatID, Secondary)
            if (Profile:keyPressed("E")) {
                Profile:msg("Format: !pay (name) (amount)")
            }
            Animation = sleep(2)
        }
        elseif(EGP:egpColor(PayID) != Primary) {
            EGP:egpColor(PayID, Primary)
        } 
        elseif(EGP:egpColor(ChatID) != Primary) {
            EGP:egpColor(ChatID, Primary)
        }
    }
    
    function checkLoanRequests() {
        local Check1 = useCheckBox("Use funds for their intended purpose.", 0)
        local Check2 = useCheckBox("Repay loan instalments on a regular basis.", 0)
        local Check3 = useCheckBox("Use the loan within the "+BankName+"'s establishment", 0)
        local Slider = useSlider("Loan", 10000, 250000, 10000)
        if (Slider) {Amount = Slider}
        
        
        local Jobs = array("Criminal", "Law Enforcement", "Civilian")
        local Reason = array("Legal Printers", "Weapon Shipments", "Other")
        local Dropdown1 = useDropDown("Select Job:", Jobs)
        local Dropdown2 = useDropDown("Select Reason:", Reason)
        
        if (Dropdown1) {
            Ticket["Job", string] = Jobs[Dropdown1, string]
        }
        elseif(Dropdown2) {
            Ticket["Reason", string] = Reason[Dropdown2, string]
        }
        elseif (Amount) {
            EGP:egpSetText(Elements:get("Loan Amount: $0"), "Loan Amount: $"+Amount)
        }
        local RequestID = Elements:get("RequestButton")
        if(cursorPos(RequestID, Profile)) {
            EGP:egpColor(RequestID, Secondary)
            if (Profile:keyPressed("E")) {
                if (Amount) {
                    Ticket["Amount", number] = Amount
                    Ticket["Account", entity] = Profile
                    Profile:msg("Ticket created. Please go to the bank reception for further information.")
                    print(Profile:name() + ": Loan Request")
                    print("Job: " + Ticket["Job", string])
                    print("Reason: " + Ticket["Reason", string])
                    print("Amount: $" + formatNumber(Ticket["Amount", number]))
                    Amount = 0
                    changeScreen(2)
                }
                else {
                    Profile:msg("Please fill out all required information.")
                    Animation = sleep(2)
                }
            }
        }
        elseif (EGP:egpColor(RequestID) != Primary) {
            EGP:egpColor(RequestID, Primary)
        } 
    }
    
    function addPlayer(Player:entity) {
        local Steam = Player:steamID()
        local Name = Player:name()
        if (!DB:exists(Steam)) {
            DB["Customers", table][Steam, table] = table(
                "Name" = Name,
                "Membership" = "default",
                "Tenure" = CurrentDate,
                "Tax" = table(
                    "Total" = 0
                ),
                "Profit" = table(
                    "Total" = 0
                ),
                "Racks" = table(),
                "Printers" = table(),
                "Items" = table()
            )
        }
        Profile:msg("Welcome to "+ BankName + ", {red " + Profile:name() + "}. See reception for details.")
    }
    
    function checkMembershipRequest(Tiers:array) {
        local RequestID = Elements:get("Purchase")
        local Steam = Profile:steamID()
        local CurrentTier = DB["Customers", table][Steam, table]["Membership", string]
        function upgradeMembership(CurrentTier:string, Steam:string, Tiers:array) {
            local Tier = ""
            for (I=1, Tiers:count()) {
                if (CurrentTier == Tiers[I, string]) {
                    Tier = Tiers[I-1, string]
                    break
                }
            }
            if (Tier:length()) {
                DB["Customers", table][Steam, table]["Membership", string] = Tier
                Profile:msg("Thanks for upgrading your membership! You are now " + Tier + " tier.")
                drawMembership(DB["Customers", table][Profile:steamID(), table], DB["Taxes", table]:bubblesort(), MembershipPrice)
                local Sound = Elements:get("sound")
                soundPlay(Sound,19,"tau/notifications/8.mp3")
                soundVolume(Sound,25)
            }
        }
        
        if (CurrentTier == Tiers[1, string] || CurrentTier == "staff") {
            if (EGP:egpColor(RequestID) == Primary) {
                EGP:egpColor(RequestID, Secondary)
                EGP:egpSetText(Elements:get("Upgrade Membership"), "Maximum Tier Reached")
            }
        }
        else {
            if(cursorPos(RequestID, Profile)) {
                EGP:egpColor(RequestID, Secondary)
                if (Profile:keyPressed("E")) {
                    moneyRequest(Profile, MembershipPrice, "Upgrade Membership Tier?")
                }
            }
            elseif(EGP:egpColor(RequestID) == Secondary) {
                EGP:egpColor(RequestID, Primary)
            }
            if (moneyClk()) {
                upgradeMembership(CurrentTier, Steam, Tiers)
            }
        }
    }
    
    function number searchVaults(Customer:entity) {
        local CheckVault = table()
        local VaultNum = DB["Vaults", table]["VaultNum", number]
        for (I=1,VaultNum) {
            local Steam = DB["Vaults", table][I, table]["Account", entity]
            if (Steam == Customer) {
                return 1
            }
        }
        return 0
    }
    
    function checkVaults() {
        local Vaults = DB["Vaults", table]
        local VaultNum = Vaults["VaultNum", number]
        for (I = 1,Vaults["VaultNum", number]){  
            local BuyBoxID = Elements:get("BuyBox"+I)
            local Vault = Vaults[I,table]
            local Account = Vault["Account", entity]
            local Name = Vault["Name", string]
            if(cursorPos(BuyBoxID, Profile)) {
                local BuyID = Elements:get("Buy"+I)
                if (Account == Profile) {
                    EGP:egpSetText(BuyID,"Renew")
                    EGP:egpColor(BuyBoxID,Primary)
                }
                elseif(EGP:egpColor(BuyBoxID) != Red) {
                    EGP:egpSetText(BuyID,"Select")
                    EGP:egpColor(BuyBoxID,Primary)
                }
                if (Profile:keyPressed("E")) {
                    if (~User) {
                        if (!searchVaults(Profile) || Account == Profile) {
                            if (!Account:isValid() || Account == Profile) {
                                VaultSelected = I
                                moneyRequest(Profile,Vault["Price", number], "Buy "+Name) 
                            }
                        }
                        else {
                            Profile:msg("You may only own 1 vault.")
                        }
                    }
                }
            }
            elseif (!Account:isValid()){
                if (EGP:egpColor(BuyBoxID) != Green) {
                    local BuyID = Elements:get("Buy"+I)
                    EGP:egpSetText(BuyID,"Purchase")
                    EGP:egpColor(BuyBoxID,Green)
                }
            }
            elseif (EGP:egpColor(BuyBoxID) != Red) {
                local BuyID = Elements:get("Buy"+I)
                EGP:egpSetText(BuyID,"Booked")
                EGP:egpColor(BuyBoxID,Red)
            }
        }   
        #Person pays
        if(moneyClk()){
            if (!DB["Customers", table]:exists(Profile:steamID())) {
                addPlayer(Profile)
            }
            else {
                Profile:msg("Thanks for purchasing storage with "+BankName+".")
            }
            DB["Vaults", table][VaultSelected, table]["Account", entity] = Profile
            DB["Vaults", table][VaultSelected, table]["Time", number] = DB["Vaults", table][VaultSelected, table]["Time", number] + 60
            local Vault = DB["Vaults", table][VaultSelected, table]
            local Time = Vault["Time", number]
            local Mins = Time ? ": " + toString(Time) + "mins" : ""
            EGP:egpSetText(Elements:get("Vault "+VaultSelected),Vault["Name", string] + Mins)
        }
    }
    
    function updateVault() {
        local VaultNum = DB["Vaults", table]["VaultNum", number]
        if(VaultNum < I) {
            EGP:egpRemove(Elements:get("Vault "+I))
            EGP:egpRemove(Elements:get("Sleep"+I))
            EGP:egpRemove(Elements:get("Price"+I))
            EGP:egpRemove(Elements:get("BuyBox"+I))
            EGP:egpRemove(Elements:get("Row"+I))
            EGP:egpRemove(Elements:get("Buy"+I))
            I--
        }
        else {
            I++
            local Vault = DB["Vaults", table][I, table]
            local Time = Vault["Time", number]
            local Mins = Time ? ": " + toString(Time) + "mins" : ""
            createText("Vault "+I, size(22), color(Dark), coords(vec2(40,8+I*40)))
            createText("Tier"+I, size(22), color(Dark), align(1), coords(vec2(232.5,8+I*40)))
            createText("Price"+I, size(22), color(Dark), align(1), coords(vec2(320,8+I*40)))
            createBox("BuyBox"+I, size(vec2(92,40)), color(Green), coords(vec2(391,I*40))) 
            createBox("Row"+I, size(vec2(ScreenXY-55,3)), color(Dark), coords(vec2(30,39+(I-1)*40)))
            createText("Buy"+I, size(18), color(White), align(1), coords(vec2(440,10+I*40)))
            EGP:egpSetText(Elements:get("Vault "+I),Vault["Name", string] + Mins)
            EGP:egpSetText(Elements:get("Price"+I),"$"+toString(Vault["Price", number]))
            EGP:egpSetText(Elements:get("Tier"+I),toString(Vault["Size", number]))
            EGP:egpSetText(Elements:get("Buy"+I),"Purchase")
        }
        EGP:egpSize(Elements:get("TableBackground"), size(vec2(ScreenXY-60,VaultNum*40)))
        EGP:egpSize(Elements:get("Column1"), size(vec2(3,51+(VaultNum-1)*40)))
        EGP:egpSize(Elements:get("Column2"), size(vec2(3,51+(VaultNum-1)*40)))
        EGP:egpSize(Elements:get("Column3"), size(vec2(3,51+(VaultNum-1)*40)))
    }
    function handleChat(Player:entity, Message:string, _:number) {
        Arguments = Message:sub(2):explode(" ")
        Command = Arguments:shiftString() 
        switch(Command) {
            case "pay",
                local Name = Arguments[1,string]:findPlayer()
                local Amount = Arguments[2,string]:toNumber()
                if (Name:isValid()) {
                    PayEntity = Name
                    PayAmount = Amount
                    Profile:msg("Pay " + Name:name() + " $" + Amount + "? Type !yes to confirm")
                }
                else {
                    Player:msg("Could not find'" + Name:name() + "!")
                }
            break
            case "yes",
                moneyRequest(Profile, PayAmount, "Pay " + PayEntity:name())
            break
            case "loan",
                if (Player == owner()) {
                    local Action = Arguments[1,string]
                    local Name = Arguments[2,string]:findPlayer()
                    if (Name:isValid()) {
                        if (Action == "accept") {
                            if (Ticket["Account", entity] == Name) {
                                moneyGive(Name, Ticket["Amount", number])
                                Name:msg("Your loan was accepted! Job: " + Ticket["Job", string] + " Reason: " + Ticket["Reason", string])
                                Ticket = table()
                            }
                        }
                        elseif(Action == "deny") {
                            Ticket = table()
                            Name:msg("Your loan was denied!")
                        }
                    }
                    else {
                        Player:msg("Could not find'" + Name:name() + "!")
                    }
                }
            break
        }
    }
    timer("proxim", 1000)
    changeScreen(1)
}
interval(100)

# Screen Guide
# 1 = Initial
# 2 = Menu
# 3 = Account Menu
# 4 = Booking
# 5 = Pay Someone
# 6 = Storage
# 7 = Request Loan
# 8 = Contract
# 9 = Purchase Membership

if (Animation) {
    if (Screen == 1) {
        fadeIn("Welcome", 15, 0.5)
        fadeIn("Press [E] to start", 15, 0.5)
    }
    elseif (Screen == 4 || Screen == 6 || Screen == 9) {
        loadingSpinner("Loading")
    }
    else {
        Animation = sleep(3)
    }
}
else {
    if (Screen == 1) {
        if (~User & User:isValid()) {
            Profile = User
            changeScreen(2)
        }
    }
    elseif (Screen == 2) {
        checkButtons("Button", array(3,8,9,1))
    }
    elseif(Screen == 3) {
        checkButtons("Button", array(5,6,7))
    }
    elseif (Screen == 4) {
        local VaultNum = DB["Vaults", table]["VaultNum", number]
        if(VaultNum!=I) {
            updateVault()
        }
        checkVaults()
        
    }
    elseif (Screen == 5) {
        if (~User) {
            checkPayRequests()
        }
        if (moneyClk()) {
            owner():msg("Payment to " + PayEntity:name())
            moneyGive(PayEntity, PayAmount)
            PayEntity:msg("You recieved $" + formatNumber(PayAmount) + " through " + BankName + "'s payment system")
            PayAmount = 0
        }
    }
    elseif(Screen == 6) {
        if (~User) {
            local Check = useCheckBox("Auto-collect", 0)
            if(Check) {
                DB["Customers", table][Profile:steamID(), table]["DisableCollect", number] = !DB["Customers", table][Profile:steamID(), table]["DisableCollect", number]
            }
        }
    }
    elseif (Screen == 7) {
        if (~User) {
            checkLoanRequests()
        }
    }
    elseif (Screen == 8) {
        checkButtons("Okay", array(4))
    }
    elseif (Screen == 9) {
        local Tiers = DB["Taxes", table]:sort()
        if (Tiers[1, string] == "staff") {
            Tiers:shift()
        }
        checkMembershipRequest(Tiers)
        checkButtons("Contract", array(10))
    }
    if (Screen >= 2) {
        checkButtons("Back", array(2))
    }
}

if (clk("changed")) {
    if (Screen == 1) {
        drawInitial(0)
    }
    elseif (Screen == 2) {
        drawMenu()
    }
    elseif (Screen == 3) {
        drawAccount()
    }
    elseif (Screen == 5) {
        PlayerList = players():names()
        DropdownPage = 0
        drawPay()
    }
    elseif (Screen == 6 || Screen == 9 || Screen == 4) {
        timer("req", 0)
        drawLoading()
    }
    elseif (Screen == 7) {
        drawLoan()
    }
    elseif (Screen == 8) {
        if (searchVaults(Profile)) {
            changeScreen(4)
        }
        else {
            drawContract(1)
        }
    }
    elseif (Screen == 10) {
            drawContract(0)
    }
    else {
        drawToDo()
    }
}

if(clk("req")) {
    broadcastRemoteEvent(table())
}

if(clk("proxim")) {
    if (Profile:isValid()) {
        if (!proximityCheck(Profile, 100)) {
            if(Screen != 1) {
                changeScreen(1)
                Profile = noentity()
            }
        }
    }
    timer("proxim", 1000)
}

event remote(Sender:entity, Player:entity, Payload:table) {
    DB = Payload
    local Customer = DB["Customers", table][Profile:steamID(), table]
    local VaultNum = DB["Vaults", table]["VaultNum", number]
    if (Screen == 6) {
        Animation = 0
        if (searchVaults(Profile)) {
            local Tax = DB["Taxes", table][Customer["Membership", string], number]
            drawStorage(Customer, CurrentDate, Tax)
        }
        else {
            drawStorage(table(), "", 0)
        }
    }
    elseif (Screen == 9) {
        Animation = 0
        Taxes = DB["Taxes", table]:bubblesort()
        drawMembership(Customer, Taxes, MembershipPrice)
    }
    elseif (Screen == 4) {
        Animation = 0
        I = 0
        drawBooking()
        createText("*Hourly rate - 15 min grace period",size(16),coords(vec2(ScreenXY/2,105+(VaultNum-1)*50)))
    }
}

event chat(Player:entity, Message:string, Team:number) {
    if((Player == Profile || Player == owner()) && Message:index(1) == "!") {
        handleChat(Player, Message, Team)
    }
}
