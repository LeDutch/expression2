@name Auto Doors

@inputs [V1 V2 V3 V4 V5 V6 V7 V8 V9 V10]:wirelink
@persist DOORS:array [CurrentDate]:string [DB PayDays Profits]:table

#include "library/tomato_lib"

if (first() || dupefinished() || ~V1 || ~V2 || ~V3 || ~V4 || ~V5 || ~V6 || ~V7 || ~V8 || ~V9 || ~V10) {
    DOORS = array()
    for (X = 1, 10) {
        DOORS:pushWirelink(ioGetInputWirelink("V" + X))
    }
}

if (first() || dupefinished()) {
    PayDays = table()
    
    local Date = dateUTC()
    CurrentDate = toString(Date["day", number])+"/"+toString(Date["month", number])+"/"+toString(Date["year", number])
    
    Profits = table(
        "printer_basic" = 85000,
        "printer_advanced" = 105000, 
        "printer_t3" = 145000, 
        "printer_t4" = 215000, 
        "printer_vip" = 190000, 
        "printer_vip+" = 280000, 
        "printer_epic" = 345000, 
        "printer_legendary" = 440000
    )

    function number string:get_printer_profit() {
        return Profits[This, number]
    }
  
    broadcastRemoteEvent(table())
  
    function wirelink entity:getWirelink() {
        foreach (_, V:wirelink = DOORS) {
            if (This == V:entity()) {
                return V
            }
        }

        return nowirelink()
    }
    function number array:find(E:entity) {
        for (I = 1, This:count()) {
            if (This[I, entity] == E) {return I}
        }
        return 0
    }

    function number wirelink:getVaultNum() {
        foreach (I, V:wirelink = DOORS) {
            if (This == V) {
                return I
            }
        }
        return 0
    }
}

event remote(Sender:entity, Player:entity, Payload:table) {
    if (Player == owner()) {
        DB = Payload
    }
}

event keyPressed(Entity:entity, _:string, Down:number, Bind:string) {
    if (Bind == "use" && !Down) {
        local AimEntity = Entity:aimEntity()
        local Wire = AimEntity:getWirelink()
    
        if (Wire != nowirelink()) { 
            local Array = array()
            local Vaults = DB["Vaults",table]
            local VaultNum = Wire:getVaultNum()
            Array:pushEntity(Vaults[VaultNum,table]["Account", entity])
            Array:pushEntity(Vaults["Collector", entity])
            Array:pushEntity(owner())
            if (Array:find(Entity)) {
                local Vault = Vaults[VaultNum, table]
                local Owner = Vault["Account", entity]
                local Account = DB["Customers", table][Entity:steamID(), table]
                local PayDay = PayDays[Entity:steamID(), number]

                if (!PayDay) {
                    PayDays[Entity:steamID(), number] = time() + 30*60
                }
                if (Owner == Entity && Account["DisableCollect", number] && PayDay <= time()) {
                    local Printers = Account["Printers", table][CurrentDate, array]
                    local Total = 0
                    foreach (K:number, V:string = Printers) {
                        Total = Total + V:get_printer_profit()
                    }
                    moneyRequest(Entity, (Total/4) * 0.10, "VD:" + AimEntity:id())
                } else {
                    Wire["Fade", number] = 1
                    timer(AimEntity:id():toString(), 4000)
                }
            }
        }
    }
}

if(moneyClk()) {
    local PLY = moneyClkPlayer()
    local Title = moneyClkTitle()
    local Collector = DB["Vaults",table]["Collector", entity]
    moneyGive(Collector, moneyClkAmount()/2)
    Collector:msg("You recieved money from a non-collect customer")
    if (Title:sub(1, 3) == "VD:") {
        local Wire = entity(Title:sub(4):toNumber()):getWirelink()
        if (Wire != nowirelink()) {
            Wire["Fade", number] = 1
            timer(Title:sub(4), 4000)
        }
        
        PayDays[PLY:steamID(), number] = time() + 30*60
    }
}

CLK = clkName()
if (CLK) {
    switch (CLK) {
        default,
            local DoorEnt = entity(CLK:toNumber())
            local Wire = DoorEnt:getWirelink()
            if (Wire != nowirelink()) {
                Wire["Fade", number] = 0
            }
        break
    }
}
