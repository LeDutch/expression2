@name GunSort
@inputs [U1 U2 U3 U4 U5 U6 U7 U8 U9 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19 U20]:wirelink
@persist [Page]:number 
@persist [Option LogoMaterial]:string
@persist [Users]:array
@persist [Categories Menu Selection Shipments]:table
# Automagically Compiled via https://egpcompiler.com (Credits Odin & Bob Tomato)

if (first() || dupefinished()) {
    #include "library/tomato_lib"
    
    tauPrecacheMaterial("3773074")
    LogoMaterial = "../data/tau/cache/files/1a2b6f5882d9172b9d6ab62bf1be863c.png"
    
    # Global variables
    Page = 1
    Option = "All"
    Selection = table()
    Menu = table("All" = 0)
    Prefix = "Bounty Hunters Guild"
    PrefixColour = "!red"
    Shipments = table()
    Categories = table(
        "Pistols" = array("Desert Eagle","MP 412 Rex","M1911","P99","PM Makarov"),
        "SMGs" = array("H&K G36C","MAC-11","MP5","MP7","MP9","UMP 45"),
        "Shotguns" = array("M3 Super 90","M4 Super 90","Saiga-12K","Shorty Shotgun"),
        "Rifles" = array("HK-416","AR-15","AK-74","AN-94","FAMAS","FN FAL","G3A3","Magpul Masada","M14","M16A2","M16A4","M4A1","SCAR-H","XM8"),
        "Snipers" = array("AWM Sniper Rifle","G2 Contender","AL115 Rifle","M98B Sniper Rifle","SVD"),
        "Heavy"= array("M249 LMG"),
        "Armour" = array("Light Armor","Medium Armor","Heavy Armor"),
        "Explosives" = array("IED Detonator","M202 Rocker Launcher","M79 Grenade Launcher","Milkor Mk1 Grenade Launcher","Proximity Mine","RPG-7","Timed C4"),
        "Melee" = array("Throwing Knife")
    )
    
    # Visual functions
    
    function egpobject text(ID:number, ARGS:table) {
        return EGP:egpTextLayout(ID, ARGS)
    }

    function egpobject circle(ID:number, ARGS:table) {
        if (ARGS["outline", number]) {
            return EGP:egpCircleOutline(ID, ARGS)
        }
        return EGP:egpCircle(ID, ARGS)
    }

    function egpobject box(ID:number, ARGS:table) {
        if (ARGS["outline", number]) {
            return EGP:egpRoundedBoxOutline(ID, ARGS)
        }
        return EGP:egpRoundedBox(ID, ARGS)
    }

    function egpobject line(ID:number, ARGS:table) {
        return EGP:egpBox(ID, ARGS)
    }
    
    # Menu functions
    
    function void itemCreate(I:number, Item:table, Gap:number) {
        # Item Section
        let Name = Item["Name", string]
        let Amount = Item["Stock", number]
        
        box(Elements:get("Item"+I), table("x"=194.0, "y"=(I-1)*(42+Gap)+26.0, "w"=286.0, "h"=42.0, "r"=87, "g"=87, "b"=87, "radius"=10.0))
        box(Elements:get("ItemSpawn"+I), table("x"=430.0, "y"=(I-1)*(42+Gap)+26.0, "w"=50.0, "h"=42.0, "r"=200, "g"=0, "b"=0, "radius"=10.0))
        box(Elements:get("ItemSpawnLeft"+I), table("x"=425.0, "y"=(I-1)*(42+Gap)+26.0, "w"=50.0, "h"=42.0, "r"=200, "g"=0, "b"=0, "radius"=0.0))
        
        text(Elements:get("ItemSpawnText"+I), table("text"="Spawn", "x"=425.0, "y"=(I-1)*(42+Gap)+26.0, "w"=55, "h"=42.0, "r"=255, "g"=255, "b"=255, "size"=14, "halign"=1, "valign"=1))
        text(Elements:get("ItemName"+I), table("text"=Name, "x"=210.0, "y"=(I-1)*(42+Gap)+26.0, "w"=200, "h"=42.0, "r"=255, "g"=255, "b"=255, "size"=17, "halign"=0, "valign"=1))
        text(Elements:get("ItemAmount"+I), table("text"="x" + Amount, "x"=373.0, "y"=(I-1)*(42+Gap)+26.0, "w"= 67.0, "h"=42.0, "r"=255, "g"=255, "b"=255, "size"=17, "halign"=0, "valign"=1))
        
        
    }
    
    function void itemDelete(I:number) {
        EGP:egpRemove(Elements:get("Item"+I))
        EGP:egpRemove(Elements:get("ItemSpawn"+I))
        EGP:egpRemove(Elements:get("ItemSpawnLeft"+I))
        EGP:egpRemove(Elements:get("ItemSpawnText"+I))
        EGP:egpRemove(Elements:get("ItemName"+I))
        EGP:egpRemove(Elements:get("ItemAmount"+I))
    }    
    
    # Shipment functions
    
    function entity wirelink:getShipment() {
        return This["Entity", entity]
    }
    
    function wirelink entity:getWirelink() {
        foreach (_:number, V:wirelink = Users) {
            if (This == V:entity()) {
                return V
            }
        }
        return nowirelink()
    }
    
    function void wirelink:fire() {
        This["Fire", number] = 1
        timer(This:entity():id():toString(), 100)
    }
    
    function entity wirelink:getEntity() {
        let Length = 100
        let UserEntity = This:entity()
        if(!UserEntity:isValid()) {
            return noentity()
        }
        
        rangerReset()
        rangerFlags("IE")
        rangerFilter(UserEntity)
        local Ranger = rangerOffset(Length, UserEntity:toWorld(UserEntity:up()), UserEntity:up())
        
        return Ranger:entity()
    }
    
    function string table:getCategory(Name:string) {
        let Keys = This:keys()
        for (I=1, This:count()) {
            let Array = This[Keys[I, string], array]
            if (Array:findString(Name)) {
                let Keys = This:keys()
                return Keys[I, string]
            }
        }
        return "No Category Found"
    }
    
    function void getShipments() {
        Shipments = table()
        Menu = table()
        Menu["All", number] = 0
        for (I = 1, 20) {
            let User = Users[I, wirelink]
            if (User:entity():isValid()) {
                let Scan = User:getEntity()
                if (Scan:isValid() && Scan:isShipment()) {
                    let Name = Scan:shipmentName()
                    let Category = Categories:getCategory(Name)
                        
                    if (Category == "No Category Found") {
                        print(Name + ": Category not found contact Bob Tomato")
                    }
                    
                    if (!Menu:exists(Category)) {
                        Menu[Category, number] = 1
                    }
                    else {
                        Menu[Category, number] = Menu[Category, number] + 1
                    }
                    Menu["All", number] = Menu["All", number] + 1
                        
                    Shipments[Name, table] = table(
                        "Name" = Name,
                        "Stock" = Scan:shipmentAmount(),
                        "Category" = Category,
                        "User" = User
                    )
                }
            }
        }
    }
    
    function table table:sortShipments(Category:string) {
        let Table = table()
        let Keys = This:keys()
        if (Category == "All") {
            for (I=1, This:count()) {
                let Item = This[Keys[I, string], table]
                let Name = Item["Name", string]
                Table:pushTable(This[Name, table])
            }
        }
        else {
            for (I=1, This:count()) {
                let Item = This[Keys[I, string], table]
                if(Item["Category", string] == Category) {
                    let Name = Item["Name", string]
                    Table:pushTable(This[Name, table])
                }
            }
        }
        return Table
    }
    
    function void loadMenu() {
        let I = 1 
        foreach(Key:string, Amount:number = Menu) {
            text(Elements:get("Menu"+I), table("text"=Key + " (" + Amount + ")", "x"=12.0, "y"=(I-1)*32+5+176.0, "w"= 156.0, "h"=32.0, "r"=255, "g"=255, "b"=255, "size"=18, "halign"=1, "valign"=1))
            box(Elements:get("MenuBox"+I), table("a"=0, "x"=12.0, "y"=(I-1)*32+5+176.0, "w"= 156.0, "h"=32.0, "r"=255, "g"=255, "b"=255, "size"=18, "halign"=1, "valign"=1, "radius"=0))
            I++
        }
        let Count = Menu:count()
        EGP:egpRemove(Elements:get("Menu"+(Count+1)))
        EGP:egpRemove(Elements:get("Menu"+(Count+2)))
        EGP:egpRemove(Elements:get("Menu"+(Count+3)))
        EGP:egpRemove(Elements:get("Menu"+(Count+4)))
        EGP:egpRemove(Elements:get("Menu"+(Count+5)))
        EGP:egpRemove(Elements:get("Menu"+(Count+6)))
        EGP:egpRemove(Elements:get("Menu"+(Count+7)))
    }
    
    function void loadPage(Option:string) {
        Selection = Shipments:sortShipments(Option)
        EGP:egpSetText(Elements:get("PageNum"), "Page " + Page + "/" + ceil(Selection:count()/5))
        for (I=1,5) {
            let Index = pageIndex(I, Page, 5)
            let Item = Selection[Index, table]
            if (Item:count()) {
                itemCreate(I, Item, 7)
            }
            elseif(EGP:egpHasObject(Elements:get("Item"+I))) {
                itemDelete(I)
            }
        }
    }
}

if (~U1 || ~U2 || ~U3 || ~U4 || ~U5 || ~U6 || ~U7 || ~U8 || ~U9 || ~U10 || ~U11 
|| ~U12 || ~U13 || ~U14 || ~U15 || ~U16 || ~U17 || ~U18 || ~U19 || ~U20 
|| ~EGP) {
    for (I = 1, 20) {
        Users:pushWirelink(ioGetInputWirelink("U" + I))
    }
    timer("shipments", 2000)
}

if (first() || dupefinished()) {
    function void draw() {
        EGP:egpClear()
        EGP:egpDrawTopLeft(1)

        box(Elements:get("Background"), table("x"=0, "y"=0, "w"=512.0, "h"=512.0, "r"=7, "g"=7, "b"=7, "radius"=0))
        box(Elements:get("Rectangle342"), table("x"=152.0, "y"=13.0, "w"=347.0, "h"=487.0, "r"=34, "g"=34, "b"=34, "radius"=10.0))
        box(Elements:get("Rectangle343"), table("x"=12.0, "y"=13.0, "w"=119.0, "h"=487.0, "r"=53, "g"=53, "b"=53, "radius"=10.0))
        box(Elements:get("Rectangle344"), table("x"=31.0, "y"=13.0, "w"=137.0, "h"=487.0, "r"=53, "g"=53, "b"=53, "radius"=0))
        box(Elements:get("Logo"), table("x"=30.0, "y"=25.0, "w"=120.0, "h"=120.0, "r" = 255, "g" = 255, "b" = 255, "radius"=0, "material"=LogoMaterial))
        box(Elements:get("Rectangle345"), table("x"=10.0, "y"=156.0, "w"=158.0, "h"=10.0, "r"=87, "g"=87, "b"=87, "radius"=0))
        box(Elements:get("BackPage"), table("x"=268.0, "y"=467.0, "w"=32.0, "h"=32.0, "r" = 255, "g" = 255, "b" = 255, "radius"=0, "material"="materials/zerochain/zerolib/ui/icon_back.png"))
        box(Elements:get("NextPage"), table("x"=405.0, "y"=467.0, "w"=32.0, "h"=32.0, "r" = 255, "g" = 255, "b" = 255, "radius"=0, "material"="materials/zerochain/zerolib/ui/icon_back.png"))
        EGP:egpAngle(Elements:get("NextPage"), vec2(405.0, 467.0), vec2(0, -32.0), -180)
        text(Elements:get("PageNum"), table("text"="Page 1/1", "x"=305.0, "y"=469.0, "w"= 84.0, "h"=29.0, "r"=255, "g"=255, "b"=255, "size"=17, "halign"=0, "valign"=1))

    }
}

if (~EGP || first() || dupefinished()) {
    draw()
    loadMenu()
    loadPage("All")
}

if (userInput()) {
    let Buttons = array("BackPage", "NextPage")
    for(I=1, Menu:count()) {
        Buttons:pushString("MenuBox"+I)
    }
    for(I=1, 9) {
        Buttons:pushString("ItemSpawn"+I)
    }
    let Cursor = cursorObj(Buttons, User)
    switch (Cursor) {
        case "BackPage",
            if (Page > 1) {
                Page--
                loadPage(Option)
            }
        break
        case "NextPage",
            if (Page < ceil(Selection:count()/5)) {
                Page++
                loadPage(Option)
            }
        break
        default,
            for(I=1, Menu:count()) {
                if (Cursor=="MenuBox"+I) {
                    Option = ""
                    if (I == Menu:count()) {
                        Option = "All"
                    }
                    else {
                        let Keys = Menu:keys()
                        Option = Keys[I, string]
                    }
                    loadPage(Option)
                }
            }
            
            for(I=1, 9) {
                if (Cursor=="ItemSpawn"+I) {
                    let Item = Selection[pageIndex(I, Page, 9), table]
                    let WireUser = Item["User", wirelink]
                    WireUser["Fire", number] = 1
                    Item["Stock", number] = Item["Stock", number] - 1
                    User:msg("Dispensing...")
                    owner():msg("{blue " + User:name() +  "} just dispensed {yellow " + Item["Name", string] + "}")
                    timer("spawn", 1500)
                }
            }
        break
    }
}

let CLK = clkName()
if (CLK) {
    switch (CLK) {
        case "shipments",
            getShipments()
            loadMenu()
            loadPage(Option)
            timer("shipments", 2000)
        break
        case "spawn",
            getShipments()
            loadMenu()
            loadPage(Option)
        break
        default,
        break
    }
}


