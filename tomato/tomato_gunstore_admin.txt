@name Gun Garage Admin Menu
@persist [DB Sales DataSender]:table
@persist [Profit Tax Page Screen Disable]:number
@persist [CurrentDate]:string

# Automagically Compiled via https://egpcompiler.com (Credits Odin & Bob Tomato)

if (first() || dupefinished() || ~EGP) {
    #include "library/tomato_lib"
    #include "themes/gunstore/gungarage"
    
    #---------- Global Vars -----------#
    Prefix = "Gun Garage"
    PrefixColour = "grey"
    Screen = 10
    Page = 1
    Profit = 0
    Tax = 0
    Disable = 0
    Animation = 0
    DataSender table()
    
    local Date = dateUTC()
    CurrentDate = toString(Date["day", number])+"/"+toString(Date["month", number])+"/"+toString(Date["year", number])
    

    #---------- Admin Functions -------#
    
    #---------- Visual Functions ------#
    
    function void loadPage() {
        let Count = Sales:count()
        EGP:egpSetText(Elements:get("PageNum"), "Page " + Page + "/" + ceil(Count/5))
        for(I=1, 5) {
            let Sale = Sales[Count+1-pageIndex(I, Page, 5), table]
            if (Sale) {
                saleCreate(I, 8, Sale)
            }
            else {
                saleDelete(I)
            }
        }
    }
    
    function void loadStats() {
        EGP:egpSetText(Elements:get("UniqueCustomers"), "Unique Customers: " + DB["Customers", table]:count())
        EGP:egpSetText(Elements:get("SessionProfit"), "Session Profit: $" + Profit + " ($" + Tax + ")")
        EGP:egpSetText(Elements:get("TotalProfit"), "Total Profit: $" + DB["Profit", number] + " ($" + DB["Tax", number] + ")" )
    }
    
    screen_admin()
    timer("fileload", 0)
}

interval(100)

if (userInput(owner())) {
    let Buttons = array("Profit Percent", "Disable Store", "BackPage", "NextPage")
    for(I=1, 5) {
        Buttons:pushString("SaleInfo"+I)
    }
    let Cursor = cursorObj(Buttons, User)
    switch (Cursor) {
        case "Profit Percent",
            let Options = array("15%", "20%", "25%", "50%", "100%")
            let Choice = useDropDown("Profit Percent", Options)
            if (Choice) {
                let Option = Options[Choice, string]
                let Number = Option:sub(1, Option:length()-1):toNumber()
                broadcastRemoteEvent(table("Command" = "profit", "Profit" = Number))
                EGP:egpSetText(Elements:get("Profit Percent_text"), "Profit: " + Option)
            }
        break
        case "Disable Store",
            useCheckBox("Disable Store", 0)
            Disable = !Disable
            broadcastRemoteEvent(table(
                "Disable" = Disable,
                "Command" = "disable"
            ))
        break
        case "BackPage",
            if (Page > 1) {
                Page--
                loadPage()
            }
        break
        case "NextPage",
            if (Page < ceil(Sales:count()/5)) {
                Page++
                loadPage()
            }
        break
        default,
            for(I=1, 5) {
                if(Cursor == "SaleInfo"+I) {
                    let Count = Sales:count()
                    let Sale = Sales[Count+1-pageIndex(I, Page, 5), table]
                    let Steam = Sale["Steam", string]
                    owner():msg(findPlayerBySteamID(Steam):name() + "\n" + DB["Customers", table][Steam, table]:toString())
                }
            }
        break
    }
}

let CLK = clkName()
if (CLK) {
    switch (CLK) {
        case "fileload",
            fileLoad("tomato/gungarage.txt")
        break
        case "startanimation",
            Animation = 1
            timer("animation", 0)
        break 
        case "animation",
            if(Animation) {
                animations(Screen)
                timer("animation", 25)
            }
        break
        default,
        break
    }
}

event remote(Sender:entity, Player:entity, Payload:table) {
    if (Player == owner()) {
        if (Payload["Profit", number]) {
            let Sale = Payload
            let Steam = Payload["Steam", string]
            let NetTotal = Sale["NetTotal", number]
            Sales:pushTable(Sale)
            if (!DB["Sales", table]:exists(CurrentDate)) { 
                DB["Sales", table][CurrentDate, table] = table() 
            }
            Profit += Payload["Profit", number]
            Tax += Payload["Tax", number]
            
            Payload:removeTable("Cart")
            Payload:removeTable("Name")
            
            # Database 
            DB["Sales", table][CurrentDate, table]:pushTable(Sale)
            DB["Profit", number] = DB["Profit", number] + Profit
            DB["Tax", number] = DB["Tax", number] + Tax
            if (!DB["Customers", table]:exists(Steam)) {
                let Customer = table(
                    "Profit" = Profit,
                    "Tax" = Tax,
                    "Credits" = NetTotal*0.01
                )
                DB["Customers", table][Steam, table] = Customer
            }
            else {
                let Customer = DB["Customers", table][Steam, table]
                let Percent = DB["Membership", number] ? 2.5 : 1
                Customer["Profit", number] = Customer["Profit", number] + Profit
                Customer["Tax", number] = Customer["Tax", number] + Tax
                Customer["Credits", number] = floor(NetTotal*(Percent/100))
            }
            
            loadPage()
            loadStats()
            fileWrite("tomato/gungarage.txt", jsonEncode(DB, 1))
            if (Page == 1) {
                box(Elements:get("MaskSale"), table("a"=255,"x"=27.0, "y"=128.0, "w"=462.0, "h"=40.0, "r"=0, "g"=0, "b"=0, "radius"=0))
                animations(Screen)
                timer("startanimation", 100)
            }
        }
        elseif(Payload["Member", string]) {
            let Name = Payload["Name", string]
            let Steam = Payload["Member", string]
            DB["Customers", table][Steam, table]["Membership", number] = 1
            owner():msg(Name + " just bought membership!")
            fileWrite("tomato/gungarage.txt", jsonEncode(DB, 1))
        }
        elseif(Payload["ProfitPercent", number]) {
            EGP:egpSetText(Elements:get("Profit Percent_text"), "Profit: " + Payload["ProfitPercent", number] + "%")
        }
        elseif(Payload["Blacklist", table]) {
            let Steam = Payload["Blacklist", table]["Steam", string]
            let Reason = Payload["Blacklis", table]["Reason", string]
            DB["Customers", table][Steam, table]["Blacklist", string] = Reason
            fileWrite("tomato/gungarage.txt", jsonEncode(DB, 1))
        }
        else {
            let ID = Payload["ID", number]
            if (ID) {
                owner():msg("Established remote connection: " + ID)
                broadcastRemoteEvent(
                table("Command" = "members", 
                      "Membership"=DB["MembershipPrice", number],
                      "Customers"=DB["Customers", table]))
            }
        }
    }
}

event fileLoaded(FilePath:string, Data:string) {
    DB = jsonDecode(Data)
    owner():msg("Customer data loaded.")
    broadcastRemoteEvent(table("Command" = "req"))
    loadStats()
}

event fileErrored(FilePath:string, Status:number) {
    owner():msg("Could not find DB file. Type !reset to create a new database.")
}

event chat(Player:entity, Message:string, _:number) {
    if (Player == owner() && Message[1] == "!") {
        Arguments = Message:sub(2):explode(" ")
        Command = Arguments:shiftString()
        hideChat(1)
        switch (Command) {
            case "reset",
                DB = table(
                    "Profit" = 0,
                    "Tax" = 0,
                    "MembershipPrice" = 1000000,
                    "Sales" = table(),
                    "Customers" = table()
                    )
                owner():msg("Database reset.")
                broadcastRemoteEvent(table("Command" = "reset"))
                fileWrite("tomato/gungarage.txt", jsonEncode(DB, 1))
            break
            case "membership",
                let Amount = Arguments[1,string]:toNumber()
                if (Amount) {
                    DB["MembershipPrice"] = Amount
                }
                fileWrite("tomato/gungarage.txt", jsonEncode(DB, 1))
            break
            default,
            break
        }
    }
}
