@name Tomato GunGarage Range
@inputs [Button]:wirelink
@outputs Accuracy:number
@persist [Flags Shots]:array
@strict

#include "lib/tomato/1.1/tomato_ui"
#include "lib/tomato/1.1/tomato_core"

# Super cool idea 
# Save each bullet in relation to the target center (where it lands) and display them all as an average.

if (first() || dupefinished()) {
    Flags = array()
    Shots = array()
}

function number calculateScore(TargetsHit:number, AverageAccuracy:number, TotalTime:number) {
    let BaseScorePerTarget = 100
    let TimePenaltyRate = 10

    # Calculate the accuracy multiplier
    let AccuracyMultiplier = 1 + (AverageAccuracy - 0.5) * 2

    # Calculate the score
    let BaseScore = BaseScorePerTarget * TargetsHit * AccuracyMultiplier
    let TimePenalty = TotalTime * TimePenaltyRate
    let FinalScore = max(BaseScore - TimePenalty, 0) # Ensure the score doesn't go negative

    return round(FinalScore)
}

function array getFlags(Model:string) {
    findIncludeModel(Model)
    findInSphere(entity():pos(),400)
    const Props = findToArray()
    let Array = array()
    foreach(_:number, Prop:entity = Props) {
        if (Prop:owner() == owner()) {
            Array:pushEntity(Prop)
        }
    }
    return Array
}

function entity table:nextFlag(CurrentFlag:entity) {
    const RandFlag = This[randint(1, This:count()), entity]
    if (RandFlag != CurrentFlag) {
        RandFlag:setAlpha(255)
        return RandFlag
    }
    return This:nextFlag(CurrentFlag)
}

function vector2 getViewDirection2D(Player:entity) {
    if (!Player:isValid()) {
        return vec2(0, 0)  # Default to (0, 0) if player is invalid
    }

    # Get the player's eye angles (view direction)
    let EyeAngles = Player:eyeAngles()

    # Calculate the forward direction based on the eye angles
    let ForwardVec = vec(1, 0, 0):rotate(EyeAngles)

    # Get the X and Y components of the forward direction (project to 2D plane)
    let X = ForwardVec:x()
    let Y = ForwardVec:y()

    # Determine which direction in the 2D plane the player is facing
    if (abs(X) > abs(Y)) {
        return vec2(X > 0 ? 1 : -1, 0)  # Right or Left
    }
    elseif (abs(Y) > abs(X)) {
        return vec2(0, Y > 0 ? 1 : -1)  # Up or Down
    }

    # If neither X nor Y is dominant, default to (0, 0)
    return vec2(0, 0)
}

function number getAimAccuracy(Player:entity, Target:entity) {
    if (!Player:isValid() || !Target:isValid()) {
        return 0
    }

    let AimPos = Player:eyeTrace():position()
    let AABBMin = Target:aabbWorldMin()
    let AABBMax = Target:aabbWorldMax()
    let Center = (AABBMin + AABBMax) / 2

    let MaxRadius = (AABBMax - AABBMin):length() / 2
    let DistanceToCenter = AimPos:distance(Center)

    # Convert 3D shot position to local coordinates
    let LocalPos = Target:toLocal(AimPos)

    # Get player view direction
    let ViewDir = getViewDirection2D(Player)
    
    # Map the shot to a 2D coordinate system based on the detected dominant plane
    let ShotPos = (ViewDir:x() == 0) ? vec2(LocalPos:y(), LocalPos:z()) :  # X is the smallest -> Use YZ plane
                  (ViewDir:x() == 1) ? vec2(LocalPos:x(), LocalPos:z()) :  # Y is the smallest -> Use XZ plane
                                       vec2(LocalPos:x(), LocalPos:y())    # Z is the smallest -> Use XY plane
    
    Shots:pushVector2(ShotPos)

    return round(clamp(1 - (DistanceToCenter / MaxRadius), 0, 1), 2)*100
}

function void displayShots() {
    foreach (Index, Shot:vector2 = Shots) {
        let X = Shot:x() + 256
        let Y = -Shot:y() + 256
        
        # Create a small box at each shot's location
        let BoxData = table("x"=X, "y"=Y, "w"=3, "h"=3, "r"=255, "g"=0, "b"=0, "radius"=0)
        let BoxID = "Shot_" + Index
        circle(BoxID, BoxData)
    }
}


if (initial()) {
    box(table("x"=82.0, "y"=-5.0, "w"=339.0, "h"=512.0, "r"=34, "g"=40, "b"=49, "radius"=0))
    text("Title", table("text"="LEADERBOARD", "x"=82.0, "y"=-5.0, "w"= 201.0, "h"=86.0, "r"=255, "g"=255, "b"=255, "size"=19, "halign"=1, "valign"=1))
    
    # Put your logo here
    box("Logo", table("x"=292.0, "y"=13.0, "w"=120.0, "h"=53.0, "r" = 255, "g" = 255, "b" = 255, "radius"=0, 
    "material"="../data/tau/cache/files/1a2b6f5882d9172b9a0772323b6b7f71.png"))

    # 1st Place Section
    box(table("x"=424.19, "y"=141.8, "w"=9.06, "h"=13.61, "r"=44, "g"=44, "b"=91, "angle"=-51))
    box("CornerMask", table("x"=78.93, "y"=142.0, "w"=9.06, "h"=19.08, "r"=44, "g"=44, "b"=91, "radius"=0))
    box(table("x"=73.22, "y"=81.0, "w"=356.68, "h"=68.0, "r"=97, "g"=95, "b"=209, "radius"=0))
    box(table("x"=82.0, "y"=149.0, "w"=13.0, "h"=18.0, "r"=34, "g"=40, "b"=49, "radius"=0))
    box(table("x"=408.0, "y"=149.0, "w"=12.0, "h"=18.0, "r"=34, "g"=40, "b"=49, "radius"=0))
    EGP:egpAngle(Elements:get("CornerMask"), vec2(78.93, 142.0), vec2(0, -19.08), -129)
    
    text("First", table("text"="1.", "x"=74.0, "y"=81.0, "w"= 50.0, "h"=68.0, "r"=255, "g"=255, "b"=255, "size"=27, "halign"=1, "valign"=1))
    text("Second", table("text"="2.", "x"=82.0, "y"=160.0, "w"= 51.0, "h"=68.0, "r"=255, "g"=255, "b"=255, "size"=27, "halign"=1, "valign"=1))
    text("Third", table("text"="3.", "x"=82.0, "y"=228.0, "w"= 51.0, "h"=64.0, "r"=255, "g"=255, "b"=255, "size"=27, "halign"=1, "valign"=1))
    text("Fourth", table("text"="4.", "x"=82.0, "y"=292.0, "w"= 51.0, "h"=68.0, "r"=255, "g"=255, "b"=255, "size"=27, "halign"=1, "valign"=1))
    text("Fifth", table("text"="5.", "x"=82.0, "y"=360.0, "w"= 51.0, "h"=66.0, "r"=255, "g"=255, "b"=255, "size"=27, "halign"=1, "valign"=1))
    text("Format", table("text"="UserName: 100k points, (96%), 1001th", "x"=98.0, "y"=446.0, "w"= 305.0, "h"=38.0, "r"=255, "g"=255, "b"=255, "size"=14, "halign"=0, "valign"=1))
            
            
    chat("model", "!model - look at prop, changes the shooting range target", 
        function(Player:entity, _:array) {
            let AimEntity = Player:aimEntity()
            
            if (Flags:count()) {
                    #stop()
                }
            if (AimEntity:isValid()) {
                let Model = AimEntity:model()
                Flags = getFlags(Model)
                Player:msg("Set shooting model to " + Model + ".")
            }
            else {
                Player:msg("You are not looking at a prop.")
            }
        },
    owner())
    
    #tauPrecacheMaterial("7187653")
}

event entityDamage(Victim:entity, Damage:damage) {
    let Player = Damage:getAttacker()
    if (Flags:exists(Victim)) {
        print("Accuracy: " + getAimAccuracy(Player, Victim) + "%")
        displayShots()
    }
}

#[event keyPressed(Player:entity, Key:string, Down:number, KeyBind:string) {
    if (Down) {
        local AimEntity = Player:aimEntity()
        print(getViewDirection2D(Player))
    }
}#]
