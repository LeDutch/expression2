@name Tomato Core

if (first()) {
    # Initialize variables
    Prefix = "E2"
    PrefixColour = "!#d4af37"
    if (PrefixColour) {}
}

#[ =================== Messaging ========================= #
 The below two functions are for a messaging system. 
 You can modify the syntax depending on the server you are playing on.
]#

function void entity:msg(Text:string) {
    if (!This:isValid()) {return}
    #ifdef This:tauSendChatMsg("")
        This:tauSendChatMsg("{" + PrefixColour + " " + Prefix + "}: " + Text)
    #else 
        concmd("say /pm " + This:name() + " " + Prefix + ": " + Text)
    #endif
}

function void array:msgAll(Text:string) {
    foreach (_:number, Player:entity = This) {
        if (Player:isValid()) {
            #ifdef Player:tauSendChatMsg("{" + PrefixColour + " " + Prefix + "}: " + Text)
            #else 
                concmd("say /pm " + Player:name() + " " + Prefix + ": " + Text)
            #endif
        }
    }
}

# ==================== Player functions ================== #

function entity string:findPlayer() {
    return This:sub(1, 5):upper() == "STEAM" ? findPlayerBySteamID(This) : findPlayerByName(This)
}

function number isPlayerNearby(Radius:number) {
    if(findCanQuery()) {
        findIncludeClass("player")
        findInSphere(entity():pos(), Radius)
        if (findToArray():count()) {
            return 1
        }
    }
    return 0
}

function number isPlayerNearby(Player:entity, Radius:number) {
    if(findCanQuery()) {
        findIncludeClass("player")
        findInSphere(entity():pos(), Radius)
        let Array = findToArray()
        let Find = function() {
            foreach(_:number, Ent:entity = Array) {
                if (Ent == Player) {
                    return 1
                }
            }
            return 0
        }
        if (Find()[number]) {
            return 1
        }
    }
    return 0
}

function number isPlayerNearbyToEnt(Player:entity, Radius:number, Entity:entity) {
    if(findCanQuery()) {
        findIncludeClass("player")
        findInSphere(Entity:pos(), Radius)
        let Array = findToArray()
        let Find = function() {
            foreach(_:number, Ent:entity = Array) {
                if (Ent == Player) {
                    return 1
                }
            }
            return 0
        }
        if (Find()[number]) {
            return 1
        }
    }
    return 0
}

# Function to get the names of a given array of players
function array array:getPlayerNames() {
    let Array = array()
    for (I = 1, This:count()) {
        Array:pushString(This[I,entity]:name())
    }
    return Array
}

# ==================== Number functions ================== #

function string abbreviateNumber(Number:number) {
    if (Number >= 1000000) {
        return round(Number / 1000000, 2) + "M"
    }
    if (Number >= 1000) {
        return round(Number / 1000, 2) + "K"
    }
    return toString(round(Number))
}

function string formatTimeInHours(Number:number) {
    if (Number >= 24) {
        return round(Number / 24, 2) + " days"
    }
    if (Number >= 1) {
        return round(Number, 2) + (Number > 1 ? " hrs" : " hr")
    }
    return round(Number * 60, 2) + (Number > 0.1 ? " mins" : " min")
}

function string formatTimeInSeconds(Number:number) {
    if (Number > 60) {
        return round(Number / 60, 2) + " mins"
    }
    if (Number == 60) {
        return "1 min"
    }
    return Number + (Number == 1 ? " sec" : " secs")
}


# ==================== String functions ================== #

function number string:startsWith(String:string) {
    return This:left(String:length()) == String
}

function number array:findString(E:string) {
    for (I = 1, This:count()) {
        if (This[I, string] == E) {return I}
    }
    return 0
}

function number table:findString(E:string) {
    for (I = 1, This:count()) {
        if (This[I, string] == E) {return I}
    }
    return 0
}

function string truncate(Text:string, Chars:number) {
    if (Text:length() > Chars) {
        Text = Text:sub(1, Chars-3) + "..."
    }
    return Text
}

# ==================== Array functions =================== #

function array array:reverse() {
    let Temp = array()
    for (I = This:count(), 1, -1) {
        Temp:pushNumber(This[I, number])
    }
    return Temp
}

function number array:exists(A:string) {
    for (I = 1, This:count()) {
        if (This[I, string] == A) {
            return 1
        }
    }
    return 0
}

function number array:exists(A:entity) {
    for (I = 1, This:count()) {
        if (This[I, entity] == A) {
            return 1
        }
    }
    return 0
}

function number array:numExists(A:number) {
    # default func array:exists(num) is a dumb function that returns if any value exists
    for (I = 1, This:count()) {
        if (This[I, number] == A) {
            return 1
        }
    }
    return 0
}




