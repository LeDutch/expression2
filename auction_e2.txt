@name Auction E2
@inputs 
@outputs 
@persist Auction:table BidsEnabled:number
@strict

#include "lib/tomato/1.0/tomato_core"

# Initialise variables
if (first() || dupefinished()) {
    Prefix = owner():name() + " Auction"
    PrefixColour = "#c5982a"
    BidsEnabled = 0
    Auction = table(
        "Name" = "Default Auction",
        "CurrentBid" = 1000,
        "Increment" = 1,
        "Interval" = 10,
        "Radius" = 0,
        "TopBidder" = noentity(),
        "Bidders" = array()
    )
}

function announcer(Time:number) {
    if (Auction["TopBidder", entity]:isValid()) {
        Auction["Bidders", array]:msgAll("Top Bid: $" + Auction["CurrentBid", number] + " by " + Auction["TopBidder", entity]:name() + " " + Time + " seconds left...")
    }
}

function sold() {
    BidsEnabled = 0
    if (Auction["TopBidder", entity]:isValid()) {
        Auction["Bidders", array]:msgAll(Auction["Name", string] + " has been sold to " + Auction["TopBidder", entity]:name() + " for $" + Auction["CurrentBid", number])
    }
    else {
        Auction["Bidders", array]:msgAll("An Auction for " + Auction["Name", string] + " has ended with no bidders.")
    }
    
    Auction = table(
        "Name" = "Default Auction",
        "CurrentBid" = 1000,
        "Increment" = 1,
        "Interval" = 10,
        "Radius" = 0,
        "TopBidder" = noentity(),
        "Bidders" = array()
    )
}

function restartTimers() {
    const Interval = Auction["Interval", number]
    stoptimer("AuctionInterval")
    stoptimer("Auction5Seconds")
    stoptimer("Auction3Seconds")
    stoptimer("Auction2Seconds")
    stoptimer("Auction1Seconds")
    stoptimer("AuctionSold")
    
    timer(0.2, function() { # This exists to stop race conditions on the timers (e2 is dumb)
        timer("AuctionInterval", Interval, function() {
            announcer(10)
            timer("Auction5Seconds", 5, function() {
                announcer(5)
            })
            timer("Auction3Seconds", 7, function() {
                announcer(3)
            })
            timer("Auction2Seconds", 8, function() {
                announcer(2)
            })
            timer("Auction1Seconds", 9, function() {
                announcer(1)
            })
            timer("AuctionSold", 10, function() {
                sold()
            })
        })
    })
    
}

function startAuction() {
    const Radius = Auction["Radius", number]
    const CurrentBid = Auction["CurrentBid", number]
    const Name = Auction["Name", string]
    let Bidders = Auction["Bidders", array]
    Bidders:pushEntity(owner())
    BidsEnabled = 1
    
    let AnnounceText = "An Auction for " + Name + " has just started! Bidding starts at: $" + CurrentBid + " !bid (amount)"
    
    if (Radius) {
        findIncludeClass("player")
        findInSphere(entity():pos(), Radius)
        let Array = findToArray()
        if (Array:count() > 0) {
            foreach(_:number, Player:entity = Array) {
                if(!Bidders:exists(Player)) {
                    Bidders:pushEntity(Player)
                }
            }
            Auction["Bidders", array]:msgAll("You were added to an Auction for " + Name + ". Type !leave to stop seeing messages")
            Auction["Bidders", array]:msgAll(AnnounceText)
        }
        else {
            owner():msg("Not enough bidders found! (Requires 2 or more people)")
        }
    }
    else {
        concmd("say /advert " + AnnounceText)
    }

    restartTimers()
}

function restartAuction() {
    const Bidders = Auction["Bidders", array]
    
    timerRestart("Auction")
    Bidders:msgAll("The auction is restarting!")
}

function stopAuction() {
    const Bidders = Auction["Bidders", array]
    stoptimer("Auction")
    
    Bidders:msgAll("The auction has been cancelled.")
}

function pauseAuction() {
    const Bidders = Auction["Bidders", array]
    timerPause("Auction")
    
    Bidders:msgAll("The auction has been paused.")
}

function resumeAuction() {
    const Bidders = Auction["Bidders", array]
    timerResume("Auction")
    
    Bidders:msgAll("The auction has been resumed.")
}

if (first() || dupefinished()) {
    #==== User chat commands ====#
    
    #[ Works for: 
        - !bid
        - !bid (amount)
    ]#
    chat("bid", "!bid (amount) - bid on the current auction", 
        function(Player:entity, Args:array) {
            if (BidsEnabled) {
                const CurrentBid = Auction["CurrentBid", number] 
                const Increment = Auction["Increment", number] 
                let Bid = Args[1, string]:toNumber()
                if (!Bid) {
                    Bid = CurrentBid + Increment
                }
                elseif(Bid < CurrentBid) {
                    Player:msg("The bid must be over: $" + (CurrentBid + Increment))
                    return
                }
                moneyRequest(Player, Bid, "Bid on Auction? " + Bid)
            }
            else {
                Player:msg("There is no active Auction")
            }
        }
    )
    chat("leave", "!leave - leaves the current Auction", 
        function(Player:entity, _:array) {
            const Bidders = Auction["Bidders", array]
            const Index = Bidders:exists(Player)
            if(Index) {
                Bidders:removeEntity(Index)
                Player:msg("You have left the Auction")
            }
        }
    )
    
    #==== Owner chat commands ====#
    
    #[ Works for: 
        - !start (name) 
        - !start (name) (startbid) 
        - !start (name) (startbid) (increment) 
        - !start (name) (startbid) (increment) (interval)
    ]#
    chat("start", "!start (name) (startbid) (increment) (interval) - starts the auction", 
        function(_:entity, Args:array) {
            let Name = Args[1, string]
            let StartBid = Args[2, string]:toNumber()
            let Increment = Args[3, string]:toNumber()
            let Interval = Args[4, string]:toNumber()
            
            if (Name != "") {
                Auction["Name", string] = Name
            }
            if (StartBid) {
                Auction["CurrentBid", number] = StartBid
            }
            if (Increment) {
                Auction["Increment", number] = Increment
            }
            if (Interval) {
                Auction["Interval", number] = Interval
            }
            startAuction()
        },
    owner())
    
    chat("radius", "!radius (amount) - sets radius mode (only announced to people in a radius)", 
        function(_:entity, Args:array) {
            let Radius = Args[1, string]:toNumber()
            if (Radius) {
                Auction["Radius", number] = Radius
                owner():msg("Radius set to " + Radius)
            }
            stopAuction()
        },
    owner())
    
    chat("stop", "!stop - stops the auction", 
        function(_:entity, _:array) {
            stopAuction()
        },
    owner())
    
    chat("pause", "!pause - pauses the auction", 
        function(_:entity, _:array) {
            pauseAuction()
        },
    owner())
    
    chat("resume", "!resume - resumes the auction", 
        function(_:entity, _:array) {
            resumeAuction()
        },
    owner())
    
    chat("restart", "!restart - restarts the auction", 
        function(_:entity, _:array) {
            restartAuction()
        },
    owner())
}

if(moneyClk()) {
    const Player = moneyClkPlayer()
    const Amount = moneyClkAmount()
    const CurrentBid = Auction["CurrentBid", number]
    const Increment = Auction["Increment", number] 
    let Bidders = Auction["Bidders", array]
    
    if (Amount < CurrentBid) {
        Player:msg("The bid must be over: $" + (CurrentBid + Increment))
        moneyGive(Player, Amount)
    }
    else {
        const PreviousTop = Auction["TopBidder", entity]
        PreviousTop:msg("You were outbid by " + Player:name() + "!")
        moneyGive(PreviousTop, CurrentBid)
        
        Auction["TopBidder", entity] = Player
        Auction["CurrentBid", number] = Amount
        
        if(!Bidders:exists(Player)) {
            Bidders:pushEntity(Player)
        }
        Bidders:msgAll(Player:name() + " has just bid $" + Amount)
        
        restartTimers()
    }
}
