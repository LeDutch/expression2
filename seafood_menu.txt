@name Seafood Menu
@persist Screen:number Profile:entity
@persist [Food Selected Orders]:table
# Automagically Compiled via https://odev.pro (Credits Odin & Bob Tomato)

if (first() || dupefinished() || ~EGP) {
    #include "library/tomato_lib"
    #include "library/tomato_animations"
    Elements = table()
    Animation = 0
    Screen = 1
    Profile = noentity()
    Prefix = "Seafood"
    PrefixColour = "cyan"
    
    Food = table(
        "fish" = table(),
        "chips" = table(),
        "dessert" = table()
    )
    Orders = table()
    
    function number table:findItem(Category:string, Name:string) {
        foreach(_:number, Item:string = This[Category, table]:keys()) {
            if (Item == Name) {
                return 1
            }
        }
        return 0
    }
    
    function number table:countOrders(Steam:string, Item:string) {
        let Count = 0
        foreach(_:number, Order:table = This) {
            if (Order["Steam", string] == Steam && Order["Item", string] == Item) {
                Count++
            }
        }
        return Count
    }
    
    function void table:updateCategory(Category:string) {
        let Pos = EGP:egpPos(Elements:get(Category))
        let Items = This[Category, table]:keys()
        for(I=1, This[Category, table]:count()) {
            let Item = Items[I, string]
            let ID = Elements:get(Category + "_" + Item)
            EGP:egpBox(ID, Pos + vec2(0,(I-1)*18), vec2(150, 18))
            EGP:egpAlpha(ID, 0)
        }
        EGP:egpSetText(Elements:get(Category), This[Category, table]:keys():string())
        EGP:egpSetText(Elements:get(Category + "_prices"), This[Category, table]:values():string("$"))
    }
    
    function void table:deleteItem(Category:string, Name:string) {
        EGP:egpRemove(Elements:get(Category + "_" + Name))
        This[Category, table]:removeNumber(Name)
    }
    
    function void table:addItem(Category:string, Name:string, Price:number) {
        This[Category, table][Name, number] = Price
    }
    
    function void wirelink:clear() {
        This:egpClear()
        Elements:clear()
    }

    function void text(ID:number, MSG:string, Pos:vector2, VSize:vector2, Color:vector, Size:number, WA:number, HA:number) {
        EGP:egpTextLayout(ID, MSG, Pos, VSize)
        EGP:egpColor(ID, Color)
        EGP:egpSize(ID, Size)
        EGP:egpAlign(ID, WA > 0, HA > 0)
    }

    function void box(Outline:number, Radius:number, Rad:number, ID:number, Pos:vector2, Size:vector2, BSize:number, Color:vector) {
        if (Outline) {
            if (Radius) {
                EGP:egpRoundedBoxOutline(ID, Pos, Size)
                EGP:egpRadius(ID, Rad)
            } else {
                EGP:egpBoxOutline(ID, Pos, Size)
            }
        } else {
            if (Radius) {
                EGP:egpRoundedBox(ID, Pos, Size)
                EGP:egpRadius(ID, Rad)
            } else {
                EGP:egpBox(ID, Pos, Size)
            }
        }

        EGP:egpSize(ID, BSize)
        EGP:egpColor(ID, Color)
    }

    function void line(ID:number, Pos:vector2, Size:vector2, Color:vector) {
        EGP:egpBox(ID, Pos, Size)
        EGP:egpColor(ID, Color)
    }
    
    function void animations() {
        if(Screen == 1) {
            moveTo("Image", 0.5, vec2(8.0, 173.0 - 331.0/2))
        }
        elseif(Screen == 2) {
            moveTo("Image", 0.5, vec2(8.0, -110.0))
            fadeOut("Mask", 0, 0.5)
        }
    }
    
    function changeScreen(Num:number) {
        Screen = Num
        animations()
        if (Screen == 1) {
            EGP:egpAlpha(Elements:get("Mask"), 255)
            EGP:egpAlpha(Elements:get("PressE"), 255)
            EGP:egpAlpha(Elements:get("PressE_Shadow"), 255)
        }
        timer("animation", 200)
    }
    
    function void draw() {
        EGP:clear()
        EGP:egpDrawTopLeft(1)

        box(0, 0, 0, Elements:get("BG"), vec2(0, 0), vec2(512.0, 512.0), 0, vec(244,220,196))
        box(0, 0, 0, Elements:get("Rectangle213"), vec2(8.0, 11.0), vec2(495.0, 493.0), 0, vec(69,211,255))
        text(Elements:get("ATomatoProduc"), "A Tomato Production", vec2(8.0, 483.0), vec2(495.0, 21.0), vec(244,220,196), 15, 1, 1)
        text(Elements:get("FISH"), "FISH", vec2(7.0, 173.0), vec2(204.0, 31.0), vec(255,255,255), 23, 1, 1)
        text(Elements:get("1" + "FISH"), "FISH", vec2(8.0, 172.0), vec2(204.0, 31.0), vec(0,158,220), 23, 1, 1)
        line(Elements:get("Line4"), vec2(214.0, 113.0), vec2(366.0, 1.0), vec(220,242,241))
        EGP:egpAngle(Elements:get("Line4"), vec2(214.0, 113.0), vec2(0, 0), -90.0)

        line(Elements:get("Line5"), vec2(236.0, 344.0), vec2(246.0, 1.0), vec(220,242,241))
        line(Elements:get("Line6"), vec2(236.0, 204.0), vec2(246.0, 1.0), vec(220,242,241))
        line(Elements:get("Line7"), vec2(20.0, 204.0), vec2(173.0, 1.0), vec(220,242,241))
        text(Elements:get("CHIPS"), "CHIPS", vec2(212.0, 172.0), vec2(290.0, 32.0), vec(255,255,255), 23, 1, 1)
        text(Elements:get("1" + "CHIPS"), "CHIPS", vec2(213.0, 171.0), vec2(290.0, 32.0), vec(4,161,222), 23, 1, 1)
        text(Elements:get("DESSERT"), "DESSERT", vec2(212.0, 312.0), vec2(290.0, 32.0), vec(255,255,255), 23, 1, 1)
        text(Elements:get("1" + "DESSERT"), "DESSERT", vec2(213.0, 311.0), vec2(290.0, 32.0), vec(0,158,220), 23, 1, 1)
    
        #Editables
        text(Elements:get("fish"), " ", vec2(25.0, 211.0), vec2(132.0, 267.0), vec(255,255,255), 18, 0, 0)
        text(Elements:get("fish_prices"), " ", vec2(157.0, 210.0), vec2(55.0, 268.0), vec(255,255,255), 18, 0, 0)
        text(Elements:get("chips"), " ", vec2(261.0, 210.0), vec2(139.0, 101.0), vec(255,255,255), 18, 0, 0)
        text(Elements:get("chips_prices"), " ", vec2(400.0, 210.0), vec2(55.0, 102.0), vec(255,255,255), 18, 0, 0)
        text(Elements:get("dessert"), " ", vec2(261.0, 355.0), vec2(139.0, 122.0), vec(255,255,255), 18, 0, 0)
        text(Elements:get("dessert_prices"), " ", vec2(400.0, 355.0), vec2(55.0, 123.0), vec(255,255,255), 18, 0, 0)
        
        
        #Initial
        box(0, 0, 0, Elements:get("Mask"), vec2(8.0, 173.0), vec2(495.0, 331.0), 0, vec(69,211,255))
        box(0, 0, 0, Elements:get("Image"), vec2(8.0, 9.0), vec2(495.0, 282.0), 0, vec(255, 255, 255))
        tauPrecacheMaterial("9759383")
        EGP:egpMaterial(Elements:get("Image"), "../data/tau/cache/files/1a2b6f5882d9172b7dbf5f353c16c62a.png")
        
        text(Elements:get("PressE"), "Press 'E' to order", vec2(6.5, 323.0), vec2(495.0, 130.0), vec(255,255,255), 23, 1, 1)
        text(Elements:get("PressE_Shadow"), "Press 'E' to order", vec2(7.0, 322.0), vec2(495.0, 130.0), vec(0,158,220), 23, 1, 1)
    }

    draw()
    timer("proxim", 1000)
}

if (clk("draw") || ~EGP) {
    draw()
}

if(clk("proxim")) {
    if (!proximityCheck(Profile, 200)) {
        if (Screen != 1) {
            changeScreen(1)
            Profile = noentity()
        }
    }
    timer("proxim", 1000)
}
if (clk("animation")) {
    Animation = 1
}

if (userInput()) {
    if (!Profile:isValid()) {
        Profile = User
        changeScreen(2)
        EGP:egpAlpha(Elements:get("PressE"), 0)
        EGP:egpAlpha(Elements:get("PressE_Shadow"), 0)
    }
    else {
        let Categories = Food:keys()
        for (A=1, Categories:count()) {
            let Category = Categories[A, string]
            let Items = Food[Category, table]:keys()
            for(B=1, Items:count()) {
                let String = Category + "_" + Items[B, string]
                if (cursorPos(Elements:get(String), Profile)) {
                    let Arguments = String:explode("_")
                    let Category = Arguments[1, string]
                    let Name = Arguments[2, string]
                    let Price = Food[Category, table][Name, number]
                    if (Orders:countOrders(Profile:steamID(), Name) == 2) {
                        Profile:msg("You may only order 2 of each item")
                    }
                    else {
                        Selected = table(
                            "Name" = Profile:name(),
                            "Steam" = Profile:steamID(),
                            "Item" = Name,
                            "Price" = Price,
                            "Text" = "Being Made",
                            "ReadyTime" = 0
                        )
                        moneyRequest(Profile, Price, "Order " + Name + "?")
                    }
                }
            }
        }
    }
}

if (moneyClk()) {
    owner():msg(Profile:name() + " just ordered " + Selected["Item", string])
    Orders:pushTable(Selected)
    broadcastRemoteEvent(Orders) 
}


interval(100)
if (Animation) {
    animations()
}

event chat(Player:entity, Message:string, _:number) {
    if (Player == owner() || Message[1] == "!") {
        let Arguments = Message:sub(2):explode(" ")
        let Command = Arguments:shiftString()
    
        function void handleFoodCategory(Category:string, Player:entity, Arguments:array) {
            let Action = Arguments:shiftString()
    
            if (Action == "add" || Action == "del") {
                let Name = ""
                let Count = Arguments:count()
                if (Action == "add") {
                    Count -= 1
                }
                for(_=1, Count) {
                    Name += Arguments:shiftString() + " "
                }
                let Price = Arguments[1, string]
    
                if (Name == "") {
                    Player:msg("Syntax: !" + Category + " " + Action + " (name) (price)")
                } else {
                    if (Action == "add") {
                        Food:addItem(Category, Name, Price:toNumber())
                        Player:msg("Added " + Name + " at $" + Price + " to " + Category + " category.")
                    } elseif (Action == "del") {
                        if (!Food:findItem(Category, Name)) {
                            Player:msg("Could not find item: " + Name)
                        } else {
                            Food:deleteItem(Category, Name)
                            Player:msg("Deleted " + Name + " from " + Category + " category.")
                        }
                    }
                    Food:updateCategory(Category)
                }
            }
        }
        function void help() {
            let Array = array(
                "!fish add (name) (price)",
                "!chips add (name) (price)",
                "!dessert add (name) (price)",
                "!fish del (name)",
                "!chips del (name)",
                "!dessert del (name)")
            for (I = 1, Array:count()){
                owner():msg(""+Array[I,string])
            }
        }
    
        switch (Command) {
            case "fish", handleFoodCategory("fish", Player, Arguments)
            break
            case "chips", handleFoodCategory("chips", Player, Arguments)
            break
            case "dessert", handleFoodCategory("dessert", Player, Arguments)
            break
            case "help", help()
            break 
        }
    }
}

event remote(Sender:entity, Player:entity, Payload:table) {
    if (Player == owner()) {
        Orders = Payload
    }
}
