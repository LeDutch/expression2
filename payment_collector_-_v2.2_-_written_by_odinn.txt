@name Payment Collector - V2.2 - Written by Odinn
@inputs EGP:wirelink 
@outputs Statistics:table
@persist [Statistics Users PAYERS]:table
@persist [Money MINIMUM_COLLECT LOCK_CHANGES]:number CLE:entity TAX_CONFIG:table MSG_TITLE:string
@persist [Red Green White]:vector

if (first() || dupefinished()) {
    #include "library/tomato_lib"
# CONFIG. EDIT BELOW.

# Tax Percentage Categories. 25 = 25% etc. 100 = 100%
# Each entry required to be capital, will create a new command.
# $CATEGORY_NAME
# Example: $MAIN rogue 
# This sets the printer rack you're looking at to Rogue Badman, under the Main category.
# Every command will automagically contain an ID version. "$idmain rogue" etc.
TAX_CONFIG = table(

"MAIN" = 25,
"MATE" = 5,

"POLICE" = 35,
"MINGE" = 50,
"RAIDER" = 60

)

# Minimum collection. Anything under will not be paid out.
MINIMUM_COLLECT = 500

# The title prepended to the message sent message.
MSG_TITLE = "{!#A2D12A [Gumtree Bank]}"

# END OF CONFIG. DO NOT EDIT ABOVE.   
}

if (first() || dupefinished()) {

    function string string:comma() {
        local Match = 
            This:match("([-]?)(%d+)([.]?%d*)")
        
        return Match[1, string] + Match[2, string]:reverse():replaceRE("(%d%d%d)", "%1,"):reverse():replaceRE("^,", "") + Match[3, string]
    }
    function string number:comma() {
        return This:toString():comma()
    }
    function vector2 vector2:text(ID:number, Text:string, Size:number, Color:vector) {
        EGP:egpText(ID, Text, This)
        EGP:egpSize(ID, Size)
        EGP:egpColor(ID, Color)
        return This + vec2(0, Size)
    }

    Red = vec(255, 100, 100)
    White = vec(255, 255, 255)
    Green = vec(100, 255, 100)
    
    function void ddraw() {
        if (!->EGP) {
            return
        }
        
        EGP:egpClear()

        local Pos = vec2(egpScrH(owner()) * 0.05, egpScrW(owner()) * 0.20)

        if (!CLE:isValid()) {
            Pos:text(1, "View a Bank Owned Printer to see statistics.", 15, Red)
            
            return
        }

        local Data = Users[CLE:id():toString(), table]

        local SteamID = Data["SteamID", string]
        local User = findPlayerBySteamID(SteamID)
        if (!User:isValid()) {
            Pos = Pos:text(1, "STEAMID OF " + SteamID + " IS NOT ONLINE.", 25, Red)
            return
        }

        local Stats = Statistics[SteamID, table]

        local Col = Green
        if (Money != owner():money()) {
            Col = Red
        }
        
        local Mon = Money
        local TaxAmount = Data["TaxAmount", number]

        local TotalCollected = Stats["TotalIncluding", number]
        local TotalPaid = Stats["TotalCollected", number]
        local Profit = Stats["TotalProfit", number]
        
        if (EGP:egpConnectedUsers():count() > 1) {
            Mon = 999999999
            TaxAmount = 9999
            TotalCollected = 9999999
            TotalPaid = 9999999
            Profit = 9999999   
            Pos = Pos:text(101, "WARNING. MALICIOUS USERS CONNECTED TO EGP HUD.", 25, Red)
        }

        Pos = Pos:text(100, "Money Shapshot: $" + Mon:comma(), 15, Col)
        Pos = Pos:text(2, "Owned by: " + User:name(), 25, White)
        # Pos = Pos:text(1, "View Entity Name: " + CLE:toString(), 15, White)
        Pos = Pos:text(3, "Category: " + Data["Category", string], 18, White)
        Pos = Pos:text(4, "Tax Amount: " + TaxAmount + "%", 18, White)
        Pos = Pos:text(5, "---- Statistics FROM YOU --", 20, White)
        Pos = Pos:text(9, "Total Collected: $" + TotalCollected:comma(), 20, Green)
        Pos = Pos:text(6, "Total Paid: $" + TotalPaid:comma(), 18, Green)
        Pos = Pos:text(7, "Total Profit: $" + Profit:comma(), 18, Green)

    }
}

if (first() || dupefinished()) {
    Money = owner():money()
    timer("EntitySetter", 0)
    timer("AlertOwner", 0)
    fileLoad("commbank_stats.txt")
    
    dsJoinGroup("ODINS_COLLECTION")


    function void draw() {
        stoptimer("draw")
        timer("draw", 0)
    }
    
    function number entity:isPayer() {
        return PAYERS:exists(This:steamID())   
    }
    
    function void entity:setPayer() {
        if (This:isPayer()) {
            return   
        }
        
        PAYERS[This:steamID(), number] = 1
    }
    
    function void entity:removePayer() {
        PAYERS:remove(This:steamID())   
    }
    
    
    function number entity:isPrinterRack() {
        return This:type():sub(1, 12) == "printer_rack"
    }
    
    function number entity:hasUser() {
        return Users:exists(This:id():toString())
    }
    
    function entity:removeUser() {
        if (!This:hasUser()) {
            return
        }

        dsSend("add_printer", "Commbank_Statistics", 2, table(
            "rack" = This,
            "remove" = 1
        ))

        Users:remove(This:id():toString())
    }
    
    function table entity:getUser() {
        return Users[This:id():toString(), table]
    }

    function number entity:getTax() {
        if (!This:hasUser()) {
            return 0
        }

        return This:getUser()["TaxAmount", number] / 100
    }

    function entity:incStat(Name:string, Amount:number) {    
        local ID = This:steamID()

        if (!Statistics:exists(ID)) {
            Statistics[ID, table] = table()
        }
        
        Statistics[ID, table][Name, number] = Statistics[ID, table][Name, number] + Amount
        
        dsSend("update_stats", "Commbank_Statistics", 2, table(
            "entity" = This,
            "amount" = Amount,
            "name" = Name
        ))
    }
    
    function entity:setUser(Steam:string, TaxAmount:number, Category:string) {
        local AimEntity = This:aimEntity()
        
        dsSend("add_printer", "Commbank_Statistics", 2, table(
            "rack" = AimEntity,
            "owner" = findPlayerBySteamID(Steam),
            "replace" = Users:exists(AimEntity:id():toString())
        ))
        
        Users[AimEntity:id():toString(), table] = table(
            "SteamID" = Steam,
            "TaxAmount" = TaxAmount,
            "Category" = Category
            )
    }
    
    function void entity:chat(T:string) {
        if (T:sub(1, 1) != "$") {
            return
        }

        local ARGS = T:explode(" ")
        local COMMAND = ARGS[1, string]:sub(2):upper()
        ARGS:remove(1)
        
        local UsingName = 1
        if (COMMAND:sub(1, 2) == "ID") { 
            UsingName = 0
            COMMAND = COMMAND:sub(3)
        }

        if (TAX_CONFIG:exists(COMMAND)) {
            local Tax = TAX_CONFIG[COMMAND, number]

            local ID = ARGS[1, string]
            if (UsingName) {
                local PLY = findPlayerByName(ID)
                if (PLY:isValid()) {
                    ID = PLY:steamID()
                } else {
                    print("{red User} {yellow '" + ID + "'} {red not found.}")
                    return
                }
            }

            if (!This:aimEntity():isPrinterRack()) {
                print("{!You aren't looking at a Printer Rack!}")
                return
            }

            This:setUser(ID, Tax, COMMAND)
            draw()
        }
        
        switch (COMMAND) {
            
            case "ID",
                local User = findPlayerByName(ARGS[1, string])
                if (!User:isValid()) {
                    print("{red User} {yellow '" + ARGS[1, string] + "'} {red not found.}")
                    return 
                }

                print("{white SteamID64 for} {yellow '" + User:name() + "'} {white is} {yellow " + User:steamID64() +"}")
            break
            
            case "REMOVE",
                local AimEntity = This:aimEntity()
                if (!AimEntity:isPrinterRack()) {
                    print("AimEntity is not printer rack.")
                    return
                }

                if (!AimEntity:hasUser()) {
                    print("AimEntity Printer Rack does not have a user.")
                    return
                }

                AimEntity:removeUser()
                CLE = noentity()
                draw()
            
            break
        }
    }
    
    function void entity:keyPress(Key:string) {
        if (Key == "use") {
            if (!CLE:hasUser()) {
                return 
            }
            
            local Diff = This:money() - Money

            if (Diff <= MINIMUM_COLLECT) {
                print("{red NO PAYOUT.} {white Difference is lower than minimum payout of} {green $" + MINIMUM_COLLECT:comma() +"}")
                return
            }

            local Data = CLE:getUser()
            local SteamID = Data["SteamID", string]
            
            local User = findPlayerBySteamID(SteamID)
            if (!User:isValid()) {
                print("{red User with SteamID64} {yellow " + SteamID + "} {red Is not valid. Collected} {green $" + Diff:comma() + "}")
                CLE:removeUser()
                draw()
                return
            }

            local ToGive = round(Diff - Diff * (Data["TaxAmount", number] / 100))
            local Profit = round(Diff-ToGive)

            User:incStat("TotalIncluding", Diff)
            User:incStat("TotalCollected", ToGive)
            User:incStat("TotalProfit", Profit)

            moneyGive(User, ToGive)
            #concmd("sam pm " + SteamID + " \"" + "{white You received your payment of} {green $" + ToGive:comma() +"}"  + "\"")
            User:msg("{white You have received your payment of} {green $" + ToGive:comma() + "}")            
            print("{white You earned} {green $ " + Profit:comma() + "} {white from} {yellow " + User:name() + "} {white collection.}")

            Money = This:money()

            draw()
        }
    }
}

CLK = clkName()
if (CLK) {
    switch (CLK) {
        case "draw",
            ddraw()
            timer("draw", 500)
        break
        
        case "AlertOwner",
            if (->EGP) {
                local Users = EGP:egpConnectedUsers()
                if (Users:count() > 1) {
                    print("{!Unauthorized parties are accessing your Banking EGP Screen.}")
                    local Names = ""
                    foreach (_, V:entity = Users) {
                        Names = Names + V:name() + ", "
                    }
                    print("{red " + Names + "}")
                }
            }

            timer("AlertOwner", 10000)

        break
        
        case "EntitySetter",
            local Entity = owner():aimEntity()

            if (!Entity:isValid()) {
                local Copy = CLE
                CLE = noentity()
                # if (Copy == noentity()) {
                #     draw()
                # }
            } elseif (Entity != CLE) {
                if (Entity:hasUser()) {
                    CLE = Entity
                    Money = owner():money()
                    print("{*COLLECT MONEY}")

                    local Data = CLE:getUser()
                    local User = findPlayerBySteamID(Data["SteamID", string])
                    if (!User:isValid()) {
                        CLE:removeUser()
                        CLE = noentity()
                        
                    }
                    # draw()
                } else {
                    local Copy = CLE
                    
                    CLE = noentity()

                    # if (Copy != noentity()) {
                        # draw()
                    # }
                }
            } 
        
            timer("EntitySetter", 500)
        break
    }   
}

event chat(E:entity, T:string, _) {
    if (E == owner()) {
        E:chat(T) 
    }          
}

event keyPressed(PLY:entity, Key:string, Down:number, Bind:string) {
    if (PLY == owner() && !Down) {
        PLY:keyPress(Bind)   
    }
}
